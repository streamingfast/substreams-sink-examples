"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.single = exports.sequential = exports.reduce = exports.parallel = exports.mapRequestResolvers = exports.mapInputContext = exports.locally = exports.empty = void 0;
var _RequestBlock = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal/blockedRequests"));
var core = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal/core"));
var _dataSource = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal/dataSource"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @since 1.0.0
 * @category constructors
 */
const single = _RequestBlock.single;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.single = single;
const empty = _RequestBlock.empty;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.empty = empty;
const mapRequestResolvers = _RequestBlock.mapRequestResolvers;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.mapRequestResolvers = mapRequestResolvers;
const parallel = _RequestBlock.par;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.parallel = parallel;
const reduce = _RequestBlock.reduce;
/**
 * @since 1.0.0
 * @category constructors
 */
exports.reduce = reduce;
const sequential = _RequestBlock.seq;
/**
 * Provides each data source with part of its required environment.
 *
 * @since 1.0.0
 * @category utils
 */
exports.sequential = sequential;
const mapInputContext = (self, f) => reduce(self, MapInputContextReducer(f));
exports.mapInputContext = mapInputContext;
const MapInputContextReducer = f => ({
  emptyCase: () => empty,
  parCase: (left, right) => parallel(left, right),
  seqCase: (left, right) => sequential(left, right),
  singleCase: (dataSource, blockedRequest) => single(_dataSource.mapInputContext(dataSource, f), blockedRequest)
});
/**
 * Provides each data source with a fiber ref value.
 *
 * @since 1.0.0
 * @category utils
 */
const locally = core.requestBlockLocally;
exports.locally = locally;
//# sourceMappingURL=RequestBlock.js.map