import { identity } from "@effect/data/Function";
import * as core from "@effect/io/internal/core";
import * as fiberRuntime from "@effect/io/internal/fiberRuntime";
import * as _schedule from "@effect/io/internal/schedule";
import * as scopedRef from "@effect/io/internal/scopedRef";
/** @internal */
const ResourceSymbolKey = "@effect/io/Resource";
/** @internal */
export const ResourceTypeId = /*#__PURE__*/Symbol.for(ResourceSymbolKey);
/** @internal */
const cachedVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
export const auto = (acquire, policy) => core.tap(manual(acquire), manual => fiberRuntime.acquireRelease(fiberRuntime.forkDaemon(core.interruptible(_schedule.schedule_Effect(policy)(refresh(manual)))), core.interruptFiber));
/** @internal */
export const manual = acquire => core.flatMap(core.context(), env => core.map(ref => ({
  [ResourceTypeId]: cachedVariance,
  scopedRef: ref,
  acquire: () => core.provideContext(acquire, env)
}))(scopedRef.fromAcquire(core.exit(acquire))));
/** @internal */
export const get = self => core.flatMap(scopedRef.get(self.scopedRef), identity);
/** @internal */
export const refresh = self => scopedRef.set(self.scopedRef, core.map(self.acquire(), core.exitSucceed));
//# sourceMappingURL=resource.mjs.map