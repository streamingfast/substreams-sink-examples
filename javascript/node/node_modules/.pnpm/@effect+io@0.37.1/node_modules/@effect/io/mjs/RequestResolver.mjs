/**
 * @since 1.0.0
 */
import * as Context from "@effect/data/Context";
import * as Effect from "@effect/io/Effect";
import * as core from "@effect/io/internal/core";
import * as internal from "@effect/io/internal/dataSource";
/**
 * @since 1.0.0
 * @category symbols
 */
export const RequestResolverTypeId = core.RequestResolverTypeId;
/**
 * @since 1.0.0
 * @category utils
 */
export const contextFromEffect = self => Effect.contextWith(_ => provideContext(self, _));
/**
 * @since 1.0.0
 * @category utils
 */
export const contextFromServices = (...services) => self => Effect.contextWith(_ => provideContext(self, Context.pick(...services)(_)));
/**
 * Returns `true` if the specified value is a `RequestResolver`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
export const isRequestResolver = core.isRequestResolver;
/**
 * Constructs a data source with the specified identifier and method to run
 * requests.
 *
 * @since 1.0.0
 * @category constructors
 */
export const make = internal.make;
/**
 * Constructs a data source with the specified identifier and method to run
 * requests.
 *
 * @since 1.0.0
 * @category constructors
 */
export const makeWithEntry = internal.makeWithEntry;
/**
 * Constructs a data source from a function taking a collection of requests
 * and returning a `RequestCompletionMap`.
 *
 * @since 1.0.0
 * @category constructors
 */
export const makeBatched = internal.makeBatched;
/**
 * A data source aspect that executes requests between two effects, `before`
 * and `after`, where the result of `before` can be used by `after`.
 *
 * @since 1.0.0
 * @category combinators
 */
export const around = internal.around;
/**
 * Returns a data source that executes at most `n` requests in parallel.
 *
 * @since 1.0.0
 * @category combinators
 */
export const batchN = internal.batchN;
/**
 * Provides this data source with part of its required context.
 *
 * @since 1.0.0
 * @category context
 */
export const mapInputContext = internal.mapInputContext;
/**
 * Returns a new data source that executes requests of type `C` using the
 * specified function to transform `C` requests into requests that either this
 * data source or that data source can execute.
 *
 * @since 1.0.0
 * @category combinators
 */
export const eitherWith = internal.eitherWith;
/**
 * Constructs a data source from a pure function.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fromFunction = internal.fromFunction;
/**
 * Constructs a data source from a pure function that takes a list of requests
 * and returns a list of results of the same size. Each item in the result
 * list must correspond to the item at the same index in the request list.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fromFunctionBatched = internal.fromFunctionBatched;
/**
 * Constructs a data source from an effectual function.
 *
 * @since 1.0.0
 * @category constructors
 */
export const fromFunctionEffect = internal.fromFunctionEffect;
/**
 * A data source that never executes requests.
 *
 * @since 1.0.0
 * @category constructors
 */
export const never = internal.never;
/**
 * Provides this data source with its required context.
 *
 * @since 1.0.0
 * @category context
 */
export const provideContext = internal.provideContext;
/**
 * Returns a new data source that executes requests by sending them to this
 * data source and that data source, returning the results from the first data
 * source to complete and safely interrupting the loser.
 *
 * @since 1.0.0
 * @category combinators
 */
export const race = internal.race;
/**
 * Returns a new data source with a localized FiberRef
 *
 * @since 1.0.0
 * @category combinators
 */
export const locally = core.resolverLocally;
//# sourceMappingURL=RequestResolver.mjs.map