import * as Context from "@effect/data/Context";
import { globalValue } from "@effect/data/Global";
import * as core from "@effect/io/internal/core";
import * as effect from "@effect/io/internal/effect";
import * as fiberRuntime from "@effect/io/internal/fiberRuntime";
import * as _layer from "@effect/io/internal/layer";
import * as _schedule from "@effect/io/internal/schedule";
import * as scopedRef from "@effect/io/internal/scopedRef";
/** @internal */
const ReloadableSymbolKey = "@effect/io/Reloadable";
/** @internal */
export const ReloadableTypeId = /*#__PURE__*/Symbol.for(ReloadableSymbolKey);
/** @internal */
const reloadableVariance = {
  _A: _ => _
};
/** @internal */
export const auto = (tag, options) => _layer.scoped(reloadableTag(tag), core.tap(reloadable => fiberRuntime.acquireRelease(fiberRuntime.forkDaemon(_schedule.schedule_Effect(options.schedule)(effect.ignoreLogged(reloadable.reload()))), core.interruptFiber))(core.map(Context.unsafeGet(reloadableTag(tag)))(_layer.build(manual(tag, {
  layer: options.layer
})))));
/** @internal */
export const autoFromConfig = (tag, options) => _layer.scoped(reloadableTag(tag), core.flatMap(env => core.map(Context.unsafeGet(reloadableTag(tag)))(_layer.build(auto(tag, {
  layer: options.layer,
  schedule: options.scheduleFromConfig(env)
}))))(core.context()));
/** @internal */
export const get = tag => core.flatMap(reloadableTag(tag), reloadable => scopedRef.get(reloadable.scopedRef));
/** @internal */
export const manual = (tag, options) => _layer.scoped(reloadableTag(tag), core.flatMap(env => core.map(ref => ({
  [ReloadableTypeId]: reloadableVariance,
  scopedRef: ref,
  reload: () => core.provideContext(env)(scopedRef.set(ref, core.map(Context.unsafeGet(tag))(_layer.build(options.layer))))
}))(scopedRef.fromAcquire(core.map(Context.unsafeGet(tag))(_layer.build(options.layer)))))(core.context()));
/** @internal */
const tagMap = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/Reloadable/tagMap"), () => new WeakMap([]));
/** @internal */
export const reloadableTag = tag => {
  if (tagMap.has(tag)) {
    return tagMap.get(tag);
  }
  const newTag = Context.Tag();
  tagMap.set(tag, newTag);
  return newTag;
};
/** @internal */
export const reload = tag => core.flatMap(reloadableTag(tag), reloadable => reloadable.reload());
/** @internal */
export const reloadFork = tag => core.flatMap(reloadableTag(tag), reloadable => core.asUnit(fiberRuntime.forkDaemon(effect.ignoreLogged(reloadable.reload()))));
//# sourceMappingURL=reloadable.mjs.map