"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.LiveTypeId = exports.Live = void 0;
var Context = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Context"));
var core = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal/core"));
var defaultServices = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/io/internal/defaultServices"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _a;
/** @internal */
const LiveTypeId = /*#__PURE__*/Symbol.for("@effect/test/Live");
/** @internal */
exports.LiveTypeId = LiveTypeId;
const Live = /*#__PURE__*/Context.Tag( /*#__PURE__*/Symbol.for("@effect/test/Live"));
/** @internal */
exports.Live = Live;
class LiveImpl {
  constructor(services) {
    this.services = services;
    this[_a] = LiveTypeId;
  }
  provide(effect) {
    return core.fiberRefLocallyWith(defaultServices.currentServices, Context.merge(this.services))(effect);
  }
}
_a = LiveTypeId;
/** @internal */
const make = services => new LiveImpl(services);
exports.make = make;
//# sourceMappingURL=live.js.map