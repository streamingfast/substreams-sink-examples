"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsafeGet = exports.pick = exports.omit = exports.merge = exports.make = exports.isTag = exports.isContext = exports.getOption = exports.get = exports.empty = exports.add = exports.TagTypeId = exports.TagImpl = exports.ContextTypeId = exports.ContextImpl = void 0;
var Equal = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Equal"));
var _Function = /*#__PURE__*/require("@effect/data/Function");
var G = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Global"));
var Hash = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Hash"));
var _Effect = /*#__PURE__*/require("@effect/data/internal/Effect");
var option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("@effect/data/Option"));
var _Pipeable = /*#__PURE__*/require("@effect/data/Pipeable");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var _a;
/** @internal */
const TagTypeId = /*#__PURE__*/Symbol.for("@effect/data/Context/Tag");
/** @internal */
exports.TagTypeId = TagTypeId;
class TagImpl {
  [(_a = _Effect.EffectTypeId, Equal.symbol)](that) {
    return this === that;
  }
  [Hash.symbol]() {
    return Hash.random(this);
  }
  get [TagTypeId]() {
    return {
      _S: _ => _,
      _I: _ => _
    };
  }
  constructor(identifier) {
    this._tag = "Tag";
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this[_a] = _Effect.effectVariance;
    const limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 3;
    this.creationError = new Error();
    Error.stackTraceLimit = limit;
    if (typeof identifier !== "undefined") {
      this.i0 = identifier;
      return G.globalValue(identifier, () => this);
    }
  }
  get stack() {
    return this.creationError.stack;
  }
  toString() {
    return JSON.stringify(this);
  }
  toJSON() {
    return {
      _tag: "Tag",
      identifier: this.i0,
      stack: this.stack
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  }
  of(self) {
    return self;
  }
  context(self) {
    return make(this, self);
  }
}
/** @internal */
exports.TagImpl = TagImpl;
const ContextTypeId = /*#__PURE__*/Symbol.for("@effect/data/Context");
/** @internal */
exports.ContextTypeId = ContextTypeId;
class ContextImpl {
  [Equal.symbol](that) {
    if (isContext(that)) {
      if (this.unsafeMap.size === that.unsafeMap.size) {
        for (const k of this.unsafeMap.keys()) {
          if (!that.unsafeMap.has(k) || !Equal.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  [Hash.symbol]() {
    return Hash.number(this.unsafeMap.size);
  }
  constructor(unsafeMap) {
    this.unsafeMap = unsafeMap;
    this._id = ContextTypeId;
    this._S = _ => _;
  }
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  }
}
exports.ContextImpl = ContextImpl;
const serviceNotFoundError = tag => {
  const error = new Error(`Service not found${tag.i0 ? `: ${String(tag.i0)}` : ""}`);
  if (tag.stack) {
    const lines = tag.stack.split("\n");
    if (lines.length > 2) {
      const afterAt = lines[3].match(/at (.*)/);
      if (afterAt) {
        error.message = error.message + ` (defined at ${afterAt[1]})`;
      }
    }
  }
  if (error.stack) {
    const lines = error.stack.split("\n");
    lines.splice(1, 3);
    error.stack = lines.join("\n");
  }
  return error;
};
/** @internal */
const isContext = u => typeof u === "object" && u !== null && "_id" in u && u["_id"] === ContextTypeId;
/** @internal */
exports.isContext = isContext;
const isTag = u => typeof u === "object" && u !== null && TagTypeId in u;
/** @internal */
exports.isTag = isTag;
const empty = () => new ContextImpl(new Map());
/** @internal */
exports.empty = empty;
const make = (tag, service) => new ContextImpl(new Map([[tag, service]]));
/** @internal */
exports.make = make;
const add = /*#__PURE__*/(0, _Function.dual)(3, (self, tag, service) => {
  const map = new Map(self.unsafeMap);
  map.set(tag, service);
  return new ContextImpl(map);
});
/** @internal */
exports.add = add;
const unsafeGet = /*#__PURE__*/(0, _Function.dual)(2, (self, tag) => {
  if (!self.unsafeMap.has(tag)) {
    throw serviceNotFoundError(tag);
  }
  return self.unsafeMap.get(tag);
});
/** @internal */
exports.unsafeGet = unsafeGet;
const get = unsafeGet;
/** @internal */
exports.get = get;
const getOption = /*#__PURE__*/(0, _Function.dual)(2, (self, tag) => {
  if (!self.unsafeMap.has(tag)) {
    return option.none();
  }
  return option.some(self.unsafeMap.get(tag));
});
/** @internal */
exports.getOption = getOption;
const merge = /*#__PURE__*/(0, _Function.dual)(2, (self, that) => {
  const map = new Map(self.unsafeMap);
  for (const [tag, s] of that.unsafeMap) {
    map.set(tag, s);
  }
  return new ContextImpl(map);
});
/** @internal */
exports.merge = merge;
const pick = (...tags) => self => {
  const tagSet = new Set(tags);
  const newEnv = new Map();
  for (const [tag, s] of self.unsafeMap.entries()) {
    if (tagSet.has(tag)) {
      newEnv.set(tag, s);
    }
  }
  return new ContextImpl(newEnv);
};
/** @internal */
exports.pick = pick;
const omit = (...tags) => self => {
  const newEnv = new Map(self.unsafeMap);
  for (const tag of tags) {
    newEnv.delete(tag);
  }
  return new ContextImpl(newEnv);
};
exports.omit = omit;
//# sourceMappingURL=Context.js.map