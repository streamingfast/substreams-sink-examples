// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file sf/substreams/sink/service/v1/service.proto (package sf.substreams.sink.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Package } from "../../../v1/package_pb.js";
/**
 * @generated from enum sf.substreams.sink.service.v1.DeploymentStatus
 */
export var DeploymentStatus;
(function (DeploymentStatus) {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  DeploymentStatus[DeploymentStatus["UNKNOWN"] = 0] = "UNKNOWN";
  /**
   * @generated from enum value: RUNNING = 1;
   */
  DeploymentStatus[DeploymentStatus["RUNNING"] = 1] = "RUNNING";
  /**
   * @generated from enum value: FAILING = 2;
   */
  DeploymentStatus[DeploymentStatus["FAILING"] = 2] = "FAILING";
  /**
   * @generated from enum value: PAUSED = 3;
   */
  DeploymentStatus[DeploymentStatus["PAUSED"] = 3] = "PAUSED";
  /**
   * @generated from enum value: STOPPED = 4;
   */
  DeploymentStatus[DeploymentStatus["STOPPED"] = 4] = "STOPPED";
  /**
   * @generated from enum value: STARTING = 5;
   */
  DeploymentStatus[DeploymentStatus["STARTING"] = 5] = "STARTING";
  /**
   * @generated from enum value: PAUSING = 6;
   */
  DeploymentStatus[DeploymentStatus["PAUSING"] = 6] = "PAUSING";
  /**
   * @generated from enum value: STOPPING = 7;
   */
  DeploymentStatus[DeploymentStatus["STOPPING"] = 7] = "STOPPING";
  /**
   * @generated from enum value: REMOVING = 8;
   */
  DeploymentStatus[DeploymentStatus["REMOVING"] = 8] = "REMOVING";
  /**
   * @generated from enum value: RESUMING = 9;
   */
  DeploymentStatus[DeploymentStatus["RESUMING"] = 9] = "RESUMING";
})(DeploymentStatus || (DeploymentStatus = {}));
// Retrieve enum metadata with: proto3.getEnumType(DeploymentStatus)
proto3.util.setEnumType(DeploymentStatus, "sf.substreams.sink.service.v1.DeploymentStatus", [{
  no: 0,
  name: "UNKNOWN"
}, {
  no: 1,
  name: "RUNNING"
}, {
  no: 2,
  name: "FAILING"
}, {
  no: 3,
  name: "PAUSED"
}, {
  no: 4,
  name: "STOPPED"
}, {
  no: 5,
  name: "STARTING"
}, {
  no: 6,
  name: "PAUSING"
}, {
  no: 7,
  name: "STOPPING"
}, {
  no: 8,
  name: "REMOVING"
}, {
  no: 9,
  name: "RESUMING"
}]);
/**
 * @generated from message sf.substreams.sink.service.v1.DeployRequest
 */
export class DeployRequest extends Message {
  /**
   * @generated from field: sf.substreams.v1.Package substreams_package = 1;
   */
  substreamsPackage;
  /**
   * @generated from field: bool development_mode = 2;
   */
  developmentMode = false;
  /**
   * @generated from field: repeated sf.substreams.sink.service.v1.Parameter parameters = 3;
   */
  parameters = [];
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.DeployRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "substreams_package",
    kind: "message",
    T: Package
  }, {
    no: 2,
    name: "development_mode",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 3,
    name: "parameters",
    kind: "message",
    T: Parameter,
    repeated: true
  }]);
  static fromBinary(bytes, options) {
    return new DeployRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new DeployRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new DeployRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(DeployRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.Parameter
 */
export class Parameter extends Message {
  /**
   * @generated from field: string key = 1;
   */
  key = "";
  /**
   * @generated from field: string value = 2;
   */
  value = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.Parameter";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "key",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "value",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new Parameter().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new Parameter().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new Parameter().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(Parameter, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.DeployResponse
 */
export class DeployResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status = DeploymentStatus.UNKNOWN;
  /**
   * deployment_id is a short name (max 8 characters) that uniquely identifies your deployment
   *
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";
  /**
   * @generated from field: map<string, string> services = 3;
   */
  services = {};
  /**
   * @generated from field: string reason = 4;
   */
  reason = "";
  /**
   * @generated from field: string motd = 5;
   */
  motd = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.DeployResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 2,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "services",
    kind: "map",
    K: 9 /* ScalarType.STRING */,
    V: {
      kind: "scalar",
      T: 9 /* ScalarType.STRING */
    }
  }, {
    no: 4,
    name: "reason",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "motd",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new DeployResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new DeployResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new DeployResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(DeployResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.UpdateRequest
 */
export class UpdateRequest extends Message {
  /**
   * @generated from field: sf.substreams.v1.Package substreams_package = 1;
   */
  substreamsPackage;
  /**
   * @generated from field: string deployment_id = 2;
   */
  deploymentId = "";
  /**
   * @generated from field: bool reset = 3;
   */
  reset = false;
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.UpdateRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "substreams_package",
    kind: "message",
    T: Package
  }, {
    no: 2,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "reset",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }]);
  static fromBinary(bytes, options) {
    return new UpdateRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new UpdateRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.UpdateResponse
 */
export class UpdateResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status = DeploymentStatus.UNKNOWN;
  /**
   * @generated from field: map<string, string> services = 2;
   */
  services = {};
  /**
   * @generated from field: string reason = 3;
   */
  reason = "";
  /**
   * @generated from field: string motd = 4;
   */
  motd = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.UpdateResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 2,
    name: "services",
    kind: "map",
    K: 9 /* ScalarType.STRING */,
    V: {
      kind: "scalar",
      T: 9 /* ScalarType.STRING */
    }
  }, {
    no: 3,
    name: "reason",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "motd",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new UpdateResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new UpdateResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.InfoRequest
 */
export class InfoRequest extends Message {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.InfoRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new InfoRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new InfoRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new InfoRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(InfoRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.InfoResponse
 */
export class InfoResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 1;
   */
  status = DeploymentStatus.UNKNOWN;
  /**
   * @generated from field: map<string, string> services = 2;
   */
  services = {};
  /**
   * @generated from field: string reason = 3;
   */
  reason = "";
  /**
   * @generated from field: sf.substreams.sink.service.v1.PackageInfo package_info = 4;
   */
  packageInfo;
  /**
   * @generated from field: sf.substreams.sink.service.v1.SinkProgress progress = 5;
   */
  progress;
  /**
   * @generated from field: string motd = 6;
   */
  motd = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.InfoResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 2,
    name: "services",
    kind: "map",
    K: 9 /* ScalarType.STRING */,
    V: {
      kind: "scalar",
      T: 9 /* ScalarType.STRING */
    }
  }, {
    no: 3,
    name: "reason",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "package_info",
    kind: "message",
    T: PackageInfo
  }, {
    no: 5,
    name: "progress",
    kind: "message",
    T: SinkProgress
  }, {
    no: 6,
    name: "motd",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new InfoResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new InfoResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new InfoResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(InfoResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.SinkProgress
 */
export class SinkProgress extends Message {
  /**
   * @generated from field: uint64 last_processed_block = 1;
   */
  lastProcessedBlock = protoInt64.zero;
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.SinkProgress";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "last_processed_block",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }]);
  static fromBinary(bytes, options) {
    return new SinkProgress().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new SinkProgress().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new SinkProgress().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(SinkProgress, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.PackageInfo
 */
export class PackageInfo extends Message {
  /**
   * @generated from field: string name = 1;
   */
  name = "";
  /**
   * @generated from field: string version = 2;
   */
  version = "";
  /**
   * @generated from field: string output_module_name = 3;
   */
  outputModuleName = "";
  /**
   * @generated from field: string output_module_hash = 4;
   */
  outputModuleHash = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.PackageInfo";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "version",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "output_module_name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "output_module_hash",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new PackageInfo().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new PackageInfo().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new PackageInfo().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(PackageInfo, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.ListRequest
 */
export class ListRequest extends Message {
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.ListRequest";
  static fields = proto3.util.newFieldList(() => []);
  static fromBinary(bytes, options) {
    return new ListRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ListRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ListRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(ListRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.ListResponse
 */
export class ListResponse extends Message {
  /**
   * @generated from field: repeated sf.substreams.sink.service.v1.DeploymentWithStatus deployments = 1;
   */
  deployments = [];
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.ListResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "deployments",
    kind: "message",
    T: DeploymentWithStatus,
    repeated: true
  }]);
  static fromBinary(bytes, options) {
    return new ListResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ListResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ListResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(ListResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.DeploymentWithStatus
 */
export class DeploymentWithStatus extends Message {
  /**
   * @generated from field: string id = 1;
   */
  id = "";
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus status = 2;
   */
  status = DeploymentStatus.UNKNOWN;
  /**
   * @generated from field: string reason = 3;
   */
  reason = "";
  /**
   * @generated from field: sf.substreams.sink.service.v1.PackageInfo package_info = 4;
   */
  packageInfo;
  /**
   * @generated from field: sf.substreams.sink.service.v1.SinkProgress progress = 5;
   */
  progress;
  /**
   * @generated from field: string motd = 6;
   */
  motd = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.DeploymentWithStatus";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 3,
    name: "reason",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "package_info",
    kind: "message",
    T: PackageInfo
  }, {
    no: 5,
    name: "progress",
    kind: "message",
    T: SinkProgress
  }, {
    no: 6,
    name: "motd",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new DeploymentWithStatus().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new DeploymentWithStatus().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new DeploymentWithStatus().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(DeploymentWithStatus, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.RemoveRequest
 */
export class RemoveRequest extends Message {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.RemoveRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new RemoveRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new RemoveRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new RemoveRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(RemoveRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.RemoveResponse
 */
export class RemoveResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.RemoveResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "previous_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }]);
  static fromBinary(bytes, options) {
    return new RemoveResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new RemoveResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new RemoveResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(RemoveResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.PauseRequest
 */
export class PauseRequest extends Message {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.PauseRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new PauseRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new PauseRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new PauseRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(PauseRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.PauseResponse
 */
export class PauseResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus = DeploymentStatus.UNKNOWN;
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.PauseResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "previous_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 2,
    name: "new_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }]);
  static fromBinary(bytes, options) {
    return new PauseResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new PauseResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new PauseResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(PauseResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.StopRequest
 */
export class StopRequest extends Message {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.StopRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new StopRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new StopRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new StopRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(StopRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.StopResponse
 */
export class StopResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus = DeploymentStatus.UNKNOWN;
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.StopResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "previous_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 2,
    name: "new_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }]);
  static fromBinary(bytes, options) {
    return new StopResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new StopResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new StopResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(StopResponse, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.ResumeRequest
 */
export class ResumeRequest extends Message {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.ResumeRequest";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "deployment_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }]);
  static fromBinary(bytes, options) {
    return new ResumeRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ResumeRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ResumeRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(ResumeRequest, a, b);
  }
}
/**
 * @generated from message sf.substreams.sink.service.v1.ResumeResponse
 */
export class ResumeResponse extends Message {
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus previous_status = 1;
   */
  previousStatus = DeploymentStatus.UNKNOWN;
  /**
   * @generated from field: sf.substreams.sink.service.v1.DeploymentStatus new_status = 2;
   */
  newStatus = DeploymentStatus.UNKNOWN;
  constructor(data) {
    super();
    proto3.util.initPartial(data, this);
  }
  static runtime = proto3;
  static typeName = "sf.substreams.sink.service.v1.ResumeResponse";
  static fields = proto3.util.newFieldList(() => [{
    no: 1,
    name: "previous_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }, {
    no: 2,
    name: "new_status",
    kind: "enum",
    T: proto3.getEnumType(DeploymentStatus)
  }]);
  static fromBinary(bytes, options) {
    return new ResumeResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ResumeResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ResumeResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return proto3.util.equals(ResumeResponse, a, b);
  }
}
//# sourceMappingURL=service_pb.js.map