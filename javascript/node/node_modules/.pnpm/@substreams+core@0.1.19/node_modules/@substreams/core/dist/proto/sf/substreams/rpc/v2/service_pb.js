// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file sf/substreams/rpc/v2/service.proto (package sf.substreams.rpc.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Modules } from "../../v1/modules_pb.js";
import { BlockRef, Clock } from "../../v1/clock_pb.js";
/**
 * @generated from message sf.substreams.rpc.v2.Request
 */
export class Request extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int64 start_block_num = 1;
         */
        Object.defineProperty(this, "startBlockNum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: string start_cursor = 2;
         */
        Object.defineProperty(this, "startCursor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: uint64 stop_block_num = 3;
         */
        Object.defineProperty(this, "stopBlockNum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * With final_block_only, you only receive blocks that are irreversible:
         * 'final_block_height' will be equal to current block and no 'undo_signal' will ever be sent
         *
         * @generated from field: bool final_blocks_only = 4;
         */
        Object.defineProperty(this, "finalBlocksOnly", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * Substreams has two mode when executing your module(s) either development mode or production
         * mode. Development and production modes impact the execution of Substreams, important aspects
         * of execution include:
         * * The time required to reach the first byte.
         * * The speed that large ranges get executed.
         * * The module logs and outputs sent back to the client.
         *
         * By default, the engine runs in developer mode, with richer and deeper output. Differences
         * between production and development modes include:
         * * Forward parallel execution is enabled in production mode and disabled in development mode
         * * The time required to reach the first byte in development mode is faster than in production mode.
         *
         * Specific attributes of development mode include:
         * * The client will receive all of the executed module's logs.
         * * It's possible to request specific store snapshots in the execution tree (via `debug_initial_store_snapshot_for_modules`).
         * * Multiple module's output is possible.
         *
         * With production mode`, however, you trade off functionality for high speed enabling forward
         * parallel execution of module ahead of time.
         *
         * @generated from field: bool production_mode = 5;
         */
        Object.defineProperty(this, "productionMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * @generated from field: string output_module = 6;
         */
        Object.defineProperty(this, "outputModule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: sf.substreams.v1.Modules modules = 7;
         */
        Object.defineProperty(this, "modules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Available only in developer mode
         *
         * @generated from field: repeated string debug_initial_store_snapshot_for_modules = 10;
         */
        Object.defineProperty(this, "debugInitialStoreSnapshotForModules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Request().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Request, a, b);
    }
}
Object.defineProperty(Request, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Request, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.Request"
});
Object.defineProperty(Request, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "start_block_num", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "start_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "stop_block_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 4, name: "final_blocks_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 5, name: "production_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 6, name: "output_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "modules", kind: "message", T: Modules },
        { no: 10, name: "debug_initial_store_snapshot_for_modules", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.Response
 */
export class Response extends Message {
    constructor(data) {
        super();
        /**
         * @generated from oneof sf.substreams.rpc.v2.Response.message
         */
        Object.defineProperty(this, "message", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Response().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Response().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Response().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Response, a, b);
    }
}
Object.defineProperty(Response, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Response, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.Response"
});
Object.defineProperty(Response, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "session", kind: "message", T: SessionInit, oneof: "message" },
        { no: 2, name: "progress", kind: "message", T: ModulesProgress, oneof: "message" },
        { no: 3, name: "block_scoped_data", kind: "message", T: BlockScopedData, oneof: "message" },
        { no: 4, name: "block_undo_signal", kind: "message", T: BlockUndoSignal, oneof: "message" },
        { no: 10, name: "debug_snapshot_data", kind: "message", T: InitialSnapshotData, oneof: "message" },
        { no: 11, name: "debug_snapshot_complete", kind: "message", T: InitialSnapshotComplete, oneof: "message" },
    ])
});
/**
 * BlockUndoSignal informs you that every bit of data
 * with a block number above 'last_valid_block' has been reverted
 * on-chain. Delete that data and restart from 'last_valid_cursor'
 *
 * @generated from message sf.substreams.rpc.v2.BlockUndoSignal
 */
export class BlockUndoSignal extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: sf.substreams.v1.BlockRef last_valid_block = 1;
         */
        Object.defineProperty(this, "lastValidBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @generated from field: string last_valid_cursor = 2;
         */
        Object.defineProperty(this, "lastValidCursor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockUndoSignal().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockUndoSignal().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockUndoSignal().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockUndoSignal, a, b);
    }
}
Object.defineProperty(BlockUndoSignal, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(BlockUndoSignal, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.BlockUndoSignal"
});
Object.defineProperty(BlockUndoSignal, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "last_valid_block", kind: "message", T: BlockRef },
        { no: 2, name: "last_valid_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.BlockScopedData
 */
export class BlockScopedData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: sf.substreams.rpc.v2.MapModuleOutput output = 1;
         */
        Object.defineProperty(this, "output", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @generated from field: sf.substreams.v1.Clock clock = 2;
         */
        Object.defineProperty(this, "clock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @generated from field: string cursor = 3;
         */
        Object.defineProperty(this, "cursor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * Non-deterministic, allows substreams-sink to let go of their undo data.
         *
         * @generated from field: uint64 final_block_height = 4;
         */
        Object.defineProperty(this, "finalBlockHeight", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: repeated sf.substreams.rpc.v2.MapModuleOutput debug_map_outputs = 10;
         */
        Object.defineProperty(this, "debugMapOutputs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * @generated from field: repeated sf.substreams.rpc.v2.StoreModuleOutput debug_store_outputs = 11;
         */
        Object.defineProperty(this, "debugStoreOutputs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockScopedData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockScopedData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockScopedData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockScopedData, a, b);
    }
}
Object.defineProperty(BlockScopedData, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(BlockScopedData, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.BlockScopedData"
});
Object.defineProperty(BlockScopedData, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "output", kind: "message", T: MapModuleOutput },
        { no: 2, name: "clock", kind: "message", T: Clock },
        { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "final_block_height", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 10, name: "debug_map_outputs", kind: "message", T: MapModuleOutput, repeated: true },
        { no: 11, name: "debug_store_outputs", kind: "message", T: StoreModuleOutput, repeated: true },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.SessionInit
 */
export class SessionInit extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string trace_id = 1;
         */
        Object.defineProperty(this, "traceId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: uint64 resolved_start_block = 2;
         */
        Object.defineProperty(this, "resolvedStartBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 linear_handoff_block = 3;
         */
        Object.defineProperty(this, "linearHandoffBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 max_parallel_workers = 4;
         */
        Object.defineProperty(this, "maxParallelWorkers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SessionInit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SessionInit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SessionInit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(SessionInit, a, b);
    }
}
Object.defineProperty(SessionInit, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(SessionInit, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.SessionInit"
});
Object.defineProperty(SessionInit, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "resolved_start_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "linear_handoff_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 4, name: "max_parallel_workers", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.InitialSnapshotComplete
 */
export class InitialSnapshotComplete extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string cursor = 1;
         */
        Object.defineProperty(this, "cursor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InitialSnapshotComplete().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InitialSnapshotComplete().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InitialSnapshotComplete().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InitialSnapshotComplete, a, b);
    }
}
Object.defineProperty(InitialSnapshotComplete, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(InitialSnapshotComplete, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.InitialSnapshotComplete"
});
Object.defineProperty(InitialSnapshotComplete, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.InitialSnapshotData
 */
export class InitialSnapshotData extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string module_name = 1;
         */
        Object.defineProperty(this, "moduleName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: repeated sf.substreams.rpc.v2.StoreDelta deltas = 2;
         */
        Object.defineProperty(this, "deltas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * @generated from field: uint64 sent_keys = 4;
         */
        Object.defineProperty(this, "sentKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 total_keys = 3;
         */
        Object.defineProperty(this, "totalKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new InitialSnapshotData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new InitialSnapshotData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new InitialSnapshotData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(InitialSnapshotData, a, b);
    }
}
Object.defineProperty(InitialSnapshotData, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(InitialSnapshotData, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.InitialSnapshotData"
});
Object.defineProperty(InitialSnapshotData, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "deltas", kind: "message", T: StoreDelta, repeated: true },
        { no: 4, name: "sent_keys", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "total_keys", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.MapModuleOutput
 */
export class MapModuleOutput extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: google.protobuf.Any map_output = 2;
         */
        Object.defineProperty(this, "mapOutput", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * DebugOutputInfo is available in non-production mode only
         *
         * @generated from field: sf.substreams.rpc.v2.OutputDebugInfo debug_info = 10;
         */
        Object.defineProperty(this, "debugInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MapModuleOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MapModuleOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MapModuleOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MapModuleOutput, a, b);
    }
}
Object.defineProperty(MapModuleOutput, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(MapModuleOutput, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.MapModuleOutput"
});
Object.defineProperty(MapModuleOutput, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "map_output", kind: "message", T: Any },
        { no: 10, name: "debug_info", kind: "message", T: OutputDebugInfo },
    ])
});
/**
 * StoreModuleOutput are produced for store modules in development mode.
 * It is not possible to retrieve store models in production, with parallelization
 * enabled. If you need the deltas directly, write a pass through mapper module
 * that will get them down to you.
 *
 * @generated from message sf.substreams.rpc.v2.StoreModuleOutput
 */
export class StoreModuleOutput extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: repeated sf.substreams.rpc.v2.StoreDelta debug_store_deltas = 2;
         */
        Object.defineProperty(this, "debugStoreDeltas", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * @generated from field: sf.substreams.rpc.v2.OutputDebugInfo debug_info = 10;
         */
        Object.defineProperty(this, "debugInfo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StoreModuleOutput().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StoreModuleOutput().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StoreModuleOutput().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StoreModuleOutput, a, b);
    }
}
Object.defineProperty(StoreModuleOutput, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(StoreModuleOutput, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.StoreModuleOutput"
});
Object.defineProperty(StoreModuleOutput, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "debug_store_deltas", kind: "message", T: StoreDelta, repeated: true },
        { no: 10, name: "debug_info", kind: "message", T: OutputDebugInfo },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.OutputDebugInfo
 */
export class OutputDebugInfo extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string logs = 1;
         */
        Object.defineProperty(this, "logs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * LogsTruncated is a flag that tells you if you received all the logs or if they
         * were truncated because you logged too much (fixed limit currently is set to 128 KiB).
         *
         * @generated from field: bool logs_truncated = 2;
         */
        Object.defineProperty(this, "logsTruncated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        /**
         * @generated from field: bool cached = 3;
         */
        Object.defineProperty(this, "cached", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new OutputDebugInfo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OutputDebugInfo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OutputDebugInfo().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(OutputDebugInfo, a, b);
    }
}
Object.defineProperty(OutputDebugInfo, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(OutputDebugInfo, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.OutputDebugInfo"
});
Object.defineProperty(OutputDebugInfo, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 2, name: "logs_truncated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "cached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.ModulesProgress
 */
export class ModulesProgress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated sf.substreams.rpc.v2.ModuleProgress modules = 1;
         */
        Object.defineProperty(this, "modules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModulesProgress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModulesProgress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModulesProgress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModulesProgress, a, b);
    }
}
Object.defineProperty(ModulesProgress, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ModulesProgress, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.ModulesProgress"
});
Object.defineProperty(ModulesProgress, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "modules", kind: "message", T: ModuleProgress, repeated: true },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.ModuleProgress
 */
export class ModuleProgress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from oneof sf.substreams.rpc.v2.ModuleProgress.type
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleProgress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleProgress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleProgress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleProgress, a, b);
    }
}
Object.defineProperty(ModuleProgress, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ModuleProgress, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.ModuleProgress"
});
Object.defineProperty(ModuleProgress, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "processed_ranges", kind: "message", T: ModuleProgress_ProcessedRanges, oneof: "type" },
        { no: 3, name: "initial_state", kind: "message", T: ModuleProgress_InitialState, oneof: "type" },
        { no: 4, name: "processed_bytes", kind: "message", T: ModuleProgress_ProcessedBytes, oneof: "type" },
        { no: 5, name: "failed", kind: "message", T: ModuleProgress_Failed, oneof: "type" },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.ModuleProgress.ProcessedRanges
 */
export class ModuleProgress_ProcessedRanges extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated sf.substreams.rpc.v2.BlockRange processed_ranges = 1;
         */
        Object.defineProperty(this, "processedRanges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleProgress_ProcessedRanges().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleProgress_ProcessedRanges().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleProgress_ProcessedRanges().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleProgress_ProcessedRanges, a, b);
    }
}
Object.defineProperty(ModuleProgress_ProcessedRanges, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ModuleProgress_ProcessedRanges, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.ModuleProgress.ProcessedRanges"
});
Object.defineProperty(ModuleProgress_ProcessedRanges, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "processed_ranges", kind: "message", T: BlockRange, repeated: true },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.ModuleProgress.InitialState
 */
export class ModuleProgress_InitialState extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 available_up_to_block = 2;
         */
        Object.defineProperty(this, "availableUpToBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleProgress_InitialState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleProgress_InitialState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleProgress_InitialState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleProgress_InitialState, a, b);
    }
}
Object.defineProperty(ModuleProgress_InitialState, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ModuleProgress_InitialState, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.ModuleProgress.InitialState"
});
Object.defineProperty(ModuleProgress_InitialState, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 2, name: "available_up_to_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.ModuleProgress.ProcessedBytes
 */
export class ModuleProgress_ProcessedBytes extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 total_bytes_read = 1;
         */
        Object.defineProperty(this, "totalBytesRead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 total_bytes_written = 2;
         */
        Object.defineProperty(this, "totalBytesWritten", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 bytes_read_delta = 3;
         */
        Object.defineProperty(this, "bytesReadDelta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 bytes_written_delta = 4;
         */
        Object.defineProperty(this, "bytesWrittenDelta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 nano_seconds_delta = 5;
         */
        Object.defineProperty(this, "nanoSecondsDelta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleProgress_ProcessedBytes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleProgress_ProcessedBytes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleProgress_ProcessedBytes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleProgress_ProcessedBytes, a, b);
    }
}
Object.defineProperty(ModuleProgress_ProcessedBytes, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ModuleProgress_ProcessedBytes, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.ModuleProgress.ProcessedBytes"
});
Object.defineProperty(ModuleProgress_ProcessedBytes, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "total_bytes_read", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 2, name: "total_bytes_written", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "bytes_read_delta", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 4, name: "bytes_written_delta", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 5, name: "nano_seconds_delta", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.ModuleProgress.Failed
 */
export class ModuleProgress_Failed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string reason = 1;
         */
        Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: repeated string logs = 2;
         */
        Object.defineProperty(this, "logs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * FailureLogsTruncated is a flag that tells you if you received all the logs or if they
         * were truncated because you logged too much (fixed limit currently is set to 128 KiB).
         *
         * @generated from field: bool logs_truncated = 3;
         */
        Object.defineProperty(this, "logsTruncated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ModuleProgress_Failed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ModuleProgress_Failed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ModuleProgress_Failed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ModuleProgress_Failed, a, b);
    }
}
Object.defineProperty(ModuleProgress_Failed, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ModuleProgress_Failed, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.ModuleProgress.Failed"
});
Object.defineProperty(ModuleProgress_Failed, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 3, name: "logs_truncated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.BlockRange
 */
export class BlockRange extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 start_block = 2;
         */
        Object.defineProperty(this, "startBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 end_block = 3;
         */
        Object.defineProperty(this, "endBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockRange, a, b);
    }
}
Object.defineProperty(BlockRange, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(BlockRange, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.BlockRange"
});
Object.defineProperty(BlockRange, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 2, name: "start_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "end_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
/**
 * @generated from message sf.substreams.rpc.v2.StoreDelta
 */
export class StoreDelta extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: sf.substreams.rpc.v2.StoreDelta.Operation operation = 1;
         */
        Object.defineProperty(this, "operation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: StoreDelta_Operation.UNSET
        });
        /**
         * @generated from field: uint64 ordinal = 2;
         */
        Object.defineProperty(this, "ordinal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: string key = 3;
         */
        Object.defineProperty(this, "key", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: bytes old_value = 4;
         */
        Object.defineProperty(this, "oldValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * @generated from field: bytes new_value = 5;
         */
        Object.defineProperty(this, "newValue", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StoreDelta().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StoreDelta().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StoreDelta().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(StoreDelta, a, b);
    }
}
Object.defineProperty(StoreDelta, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(StoreDelta, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.rpc.v2.StoreDelta"
});
Object.defineProperty(StoreDelta, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "operation", kind: "enum", T: proto3.getEnumType(StoreDelta_Operation) },
        { no: 2, name: "ordinal", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "old_value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "new_value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ])
});
/**
 * @generated from enum sf.substreams.rpc.v2.StoreDelta.Operation
 */
export var StoreDelta_Operation;
(function (StoreDelta_Operation) {
    /**
     * @generated from enum value: UNSET = 0;
     */
    StoreDelta_Operation[StoreDelta_Operation["UNSET"] = 0] = "UNSET";
    /**
     * @generated from enum value: CREATE = 1;
     */
    StoreDelta_Operation[StoreDelta_Operation["CREATE"] = 1] = "CREATE";
    /**
     * @generated from enum value: UPDATE = 2;
     */
    StoreDelta_Operation[StoreDelta_Operation["UPDATE"] = 2] = "UPDATE";
    /**
     * @generated from enum value: DELETE = 3;
     */
    StoreDelta_Operation[StoreDelta_Operation["DELETE"] = 3] = "DELETE";
})(StoreDelta_Operation || (StoreDelta_Operation = {}));
// Retrieve enum metadata with: proto3.getEnumType(StoreDelta_Operation)
proto3.util.setEnumType(StoreDelta_Operation, "sf.substreams.rpc.v2.StoreDelta.Operation", [
    { no: 0, name: "UNSET" },
    { no: 1, name: "CREATE" },
    { no: 2, name: "UPDATE" },
    { no: 3, name: "DELETE" },
]);
//# sourceMappingURL=service_pb.js.map