// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file sf/substreams/v1/clock.proto (package sf.substreams.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
/**
 * Clock is a pointer to a block with added timestamp
 *
 * @generated from message sf.substreams.v1.Clock
 */
export class Clock extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: uint64 number = 2;
         */
        Object.defineProperty(this, "number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: google.protobuf.Timestamp timestamp = 3;
         */
        Object.defineProperty(this, "timestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Clock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Clock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Clock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Clock, a, b);
    }
}
Object.defineProperty(Clock, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Clock, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.v1.Clock"
});
Object.defineProperty(Clock, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    ])
});
/**
 * BlockRef is a pointer to a block to which we don't know the timestamp
 *
 * @generated from message sf.substreams.v1.BlockRef
 */
export class BlockRef extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        Object.defineProperty(this, "id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: uint64 number = 2;
         */
        Object.defineProperty(this, "number", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockRef().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockRef().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockRef().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockRef, a, b);
    }
}
Object.defineProperty(BlockRef, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(BlockRef, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.v1.BlockRef"
});
Object.defineProperty(BlockRef, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
//# sourceMappingURL=clock_pb.js.map