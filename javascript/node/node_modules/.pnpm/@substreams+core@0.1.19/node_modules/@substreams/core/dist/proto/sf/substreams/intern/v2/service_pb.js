// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file sf/substreams/intern/v2/service.proto (package sf.substreams.internal.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Modules } from "../../v1/modules_pb.js";
/**
 * @generated from message sf.substreams.internal.v2.ProcessRangeRequest
 */
export class ProcessRangeRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 start_block_num = 1;
         */
        Object.defineProperty(this, "startBlockNum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 stop_block_num = 2;
         */
        Object.defineProperty(this, "stopBlockNum", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: string output_module = 3;
         */
        Object.defineProperty(this, "outputModule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: sf.substreams.v1.Modules modules = 4;
         */
        Object.defineProperty(this, "modules", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProcessRangeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProcessRangeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProcessRangeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProcessRangeRequest, a, b);
    }
}
Object.defineProperty(ProcessRangeRequest, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ProcessRangeRequest, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.internal.v2.ProcessRangeRequest"
});
Object.defineProperty(ProcessRangeRequest, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "start_block_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 2, name: "stop_block_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "output_module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "modules", kind: "message", T: Modules },
    ])
});
/**
 * @generated from message sf.substreams.internal.v2.ProcessRangeResponse
 */
export class ProcessRangeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string module_name = 1;
         */
        Object.defineProperty(this, "moduleName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from oneof sf.substreams.internal.v2.ProcessRangeResponse.type
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProcessRangeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProcessRangeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProcessRangeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProcessRangeResponse, a, b);
    }
}
Object.defineProperty(ProcessRangeResponse, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ProcessRangeResponse, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.internal.v2.ProcessRangeResponse"
});
Object.defineProperty(ProcessRangeResponse, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "module_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "processed_range", kind: "message", T: BlockRange, oneof: "type" },
        { no: 3, name: "processed_bytes", kind: "message", T: ProcessedBytes, oneof: "type" },
        { no: 4, name: "failed", kind: "message", T: Failed, oneof: "type" },
        { no: 5, name: "completed", kind: "message", T: Completed, oneof: "type" },
    ])
});
/**
 * @generated from message sf.substreams.internal.v2.Completed
 */
export class Completed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated sf.substreams.internal.v2.BlockRange all_processed_ranges = 1;
         */
        Object.defineProperty(this, "allProcessedRanges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * TraceId represents the producer's trace id that produced the partial files.
         * This is present here so that the consumer can use it to identify the
         * right partial files that needs to be squashed together.
         *
         * The TraceId can be empty in which case it should be assumed by the tier1
         * consuming this message that the tier2 that produced those partial files
         * is not yet updated to produce a trace id and a such, the tier1 should
         * generate a legacy partial file name.
         *
         * @generated from field: string trace_id = 2;
         */
        Object.defineProperty(this, "traceId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Completed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Completed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Completed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Completed, a, b);
    }
}
Object.defineProperty(Completed, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Completed, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.internal.v2.Completed"
});
Object.defineProperty(Completed, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "all_processed_ranges", kind: "message", T: BlockRange, repeated: true },
        { no: 2, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ])
});
/**
 * @generated from message sf.substreams.internal.v2.ProcessedBytes
 */
export class ProcessedBytes extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 total_bytes_read = 1;
         */
        Object.defineProperty(this, "totalBytesRead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 total_bytes_written = 2;
         */
        Object.defineProperty(this, "totalBytesWritten", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 bytes_read_delta = 3;
         */
        Object.defineProperty(this, "bytesReadDelta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 bytes_written_delta = 4;
         */
        Object.defineProperty(this, "bytesWrittenDelta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 nano_seconds_delta = 5;
         */
        Object.defineProperty(this, "nanoSecondsDelta", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ProcessedBytes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ProcessedBytes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ProcessedBytes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ProcessedBytes, a, b);
    }
}
Object.defineProperty(ProcessedBytes, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ProcessedBytes, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.internal.v2.ProcessedBytes"
});
Object.defineProperty(ProcessedBytes, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "total_bytes_read", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 2, name: "total_bytes_written", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "bytes_read_delta", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 4, name: "bytes_written_delta", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 5, name: "nano_seconds_delta", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
/**
 * @generated from message sf.substreams.internal.v2.Failed
 */
export class Failed extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string reason = 1;
         */
        Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * @generated from field: repeated string logs = 2;
         */
        Object.defineProperty(this, "logs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * FailureLogsTruncated is a flag that tells you if you received all the logs or if they
         * were truncated because you logged too much (fixed limit currently is set to 128 KiB).
         *
         * @generated from field: bool logs_truncated = 3;
         */
        Object.defineProperty(this, "logsTruncated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Failed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Failed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Failed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Failed, a, b);
    }
}
Object.defineProperty(Failed, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Failed, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.internal.v2.Failed"
});
Object.defineProperty(Failed, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 3, name: "logs_truncated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ])
});
/**
 * @generated from message sf.substreams.internal.v2.BlockRange
 */
export class BlockRange extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 start_block = 2;
         */
        Object.defineProperty(this, "startBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * @generated from field: uint64 end_block = 3;
         */
        Object.defineProperty(this, "endBlock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BlockRange().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BlockRange().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BlockRange().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(BlockRange, a, b);
    }
}
Object.defineProperty(BlockRange, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(BlockRange, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "sf.substreams.internal.v2.BlockRange"
});
Object.defineProperty(BlockRange, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 2, name: "start_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "end_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    ])
});
//# sourceMappingURL=service_pb.js.map