// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Location {
  static encode(message: Location, writer: Writer): void {
    const path = message.path;
    if (path.length !== 0) {
      writer.uint32(10);
      writer.fork();
      for (let i: i32 = 0; i < path.length; ++i) {
        writer.int32(path[i]);
      }
      writer.ldelim();
    }

    const span = message.span;
    if (span.length !== 0) {
      writer.uint32(18);
      writer.fork();
      for (let i: i32 = 0; i < span.length; ++i) {
        writer.int32(span[i]);
      }
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.leadingComments);

    writer.uint32(34);
    writer.string(message.trailingComments);

    const leadingDetachedComments = message.leadingDetachedComments;
    if (leadingDetachedComments.length !== 0) {
      for (let i: i32 = 0; i < leadingDetachedComments.length; ++i) {
        writer.uint32(50);
        writer.string(leadingDetachedComments[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): Location {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Location();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            message.path.push(reader.int32());
          }
          break;

        case 2:
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            message.span.push(reader.int32());
          }
          break;

        case 3:
          message.leadingComments = reader.string();
          break;

        case 4:
          message.trailingComments = reader.string();
          break;

        case 6:
          message.leadingDetachedComments.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  path: Array<i32>;
  span: Array<i32>;
  leadingComments: string;
  trailingComments: string;
  leadingDetachedComments: Array<string>;

  constructor(
    path: Array<i32> = [],
    span: Array<i32> = [],
    leadingComments: string = "",
    trailingComments: string = "",
    leadingDetachedComments: Array<string> = []
  ) {
    this.path = path;
    this.span = span;
    this.leadingComments = leadingComments;
    this.trailingComments = trailingComments;
    this.leadingDetachedComments = leadingDetachedComments;
  }
}
