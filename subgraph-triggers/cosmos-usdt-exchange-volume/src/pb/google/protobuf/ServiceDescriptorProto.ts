// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { MethodDescriptorProto } from "./MethodDescriptorProto";
import { ServiceOptions } from "./ServiceOptions";

export class ServiceDescriptorProto {
  static encode(message: ServiceDescriptorProto, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    const method = message.method;
    for (let i: i32 = 0; i < method.length; ++i) {
      writer.uint32(18);
      writer.fork();
      MethodDescriptorProto.encode(method[i], writer);
      writer.ldelim();
    }

    const options = message.options;
    if (options !== null) {
      writer.uint32(26);
      writer.fork();
      ServiceOptions.encode(options, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ServiceDescriptorProto {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ServiceDescriptorProto();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.method.push(
            MethodDescriptorProto.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.options = ServiceOptions.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  method: Array<MethodDescriptorProto>;
  options: ServiceOptions | null;

  constructor(
    name: string = "",
    method: Array<MethodDescriptorProto> = [],
    options: ServiceOptions | null = null
  ) {
    this.name = name;
    this.method = method;
    this.options = options;
  }
}
