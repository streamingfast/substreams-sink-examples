// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Declaration {
  static encode(message: Declaration, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.number);

    writer.uint32(18);
    writer.string(message.fullName);

    writer.uint32(26);
    writer.string(message.type);

    writer.uint32(32);
    writer.bool(message.isRepeated);

    writer.uint32(40);
    writer.bool(message.reserved);

    writer.uint32(48);
    writer.bool(message.repeated);
  }

  static decode(reader: Reader, length: i32): Declaration {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Declaration();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.number = reader.int32();
          break;

        case 2:
          message.fullName = reader.string();
          break;

        case 3:
          message.type = reader.string();
          break;

        case 4:
          message.isRepeated = reader.bool();
          break;

        case 5:
          message.reserved = reader.bool();
          break;

        case 6:
          message.repeated = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  number: i32;
  fullName: string;
  type: string;
  isRepeated: bool;
  reserved: bool;
  repeated: bool;

  constructor(
    number: i32 = 0,
    fullName: string = "",
    type: string = "",
    isRepeated: bool = false,
    reserved: bool = false,
    repeated: bool = false
  ) {
    this.number = number;
    this.fullName = fullName;
    this.type = type;
    this.isRepeated = isRepeated;
    this.reserved = reserved;
    this.repeated = repeated;
  }
}
