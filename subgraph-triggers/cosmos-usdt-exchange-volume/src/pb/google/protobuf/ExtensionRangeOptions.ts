// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { UninterpretedOption } from "./UninterpretedOption";
import { Declaration } from "./ExtensionRangeOptions/Declaration";
import { VerificationState } from "./ExtensionRangeOptions/VerificationState";

export class ExtensionRangeOptions {
  static encode(message: ExtensionRangeOptions, writer: Writer): void {
    const uninterpretedOption = message.uninterpretedOption;
    for (let i: i32 = 0; i < uninterpretedOption.length; ++i) {
      writer.uint32(7994);
      writer.fork();
      UninterpretedOption.encode(uninterpretedOption[i], writer);
      writer.ldelim();
    }

    const declaration = message.declaration;
    for (let i: i32 = 0; i < declaration.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Declaration.encode(declaration[i], writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int32(message.verification);
  }

  static decode(reader: Reader, length: i32): ExtensionRangeOptions {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ExtensionRangeOptions();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 999:
          message.uninterpretedOption.push(
            UninterpretedOption.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.declaration.push(Declaration.decode(reader, reader.uint32()));
          break;

        case 3:
          message.verification = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  uninterpretedOption: Array<UninterpretedOption>;
  declaration: Array<Declaration>;
  verification: VerificationState;

  constructor(
    uninterpretedOption: Array<UninterpretedOption> = [],
    declaration: Array<Declaration> = [],
    verification: VerificationState = VerificationState.UNVERIFIED
  ) {
    this.uninterpretedOption = uninterpretedOption;
    this.declaration = declaration;
    this.verification = verification;
  }
}
