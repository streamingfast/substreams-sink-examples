// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { MethodOptions } from "./MethodOptions";

export class MethodDescriptorProto {
  static encode(message: MethodDescriptorProto, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(18);
    writer.string(message.inputType);

    writer.uint32(26);
    writer.string(message.outputType);

    const options = message.options;
    if (options !== null) {
      writer.uint32(34);
      writer.fork();
      MethodOptions.encode(options, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.bool(message.clientStreaming);

    writer.uint32(48);
    writer.bool(message.serverStreaming);
  }

  static decode(reader: Reader, length: i32): MethodDescriptorProto {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MethodDescriptorProto();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.inputType = reader.string();
          break;

        case 3:
          message.outputType = reader.string();
          break;

        case 4:
          message.options = MethodOptions.decode(reader, reader.uint32());
          break;

        case 5:
          message.clientStreaming = reader.bool();
          break;

        case 6:
          message.serverStreaming = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  inputType: string;
  outputType: string;
  options: MethodOptions | null;
  clientStreaming: bool;
  serverStreaming: bool;

  constructor(
    name: string = "",
    inputType: string = "",
    outputType: string = "",
    options: MethodOptions | null = null,
    clientStreaming: bool = false,
    serverStreaming: bool = false
  ) {
    this.name = name;
    this.inputType = inputType;
    this.outputType = outputType;
    this.options = options;
    this.clientStreaming = clientStreaming;
    this.serverStreaming = serverStreaming;
  }
}
