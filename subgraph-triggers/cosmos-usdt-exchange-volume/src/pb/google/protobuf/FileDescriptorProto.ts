// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { DescriptorProto } from "./DescriptorProto";
import { EnumDescriptorProto } from "./EnumDescriptorProto";
import { ServiceDescriptorProto } from "./ServiceDescriptorProto";
import { FieldDescriptorProto } from "./FieldDescriptorProto";
import { FileOptions } from "./FileOptions";
import { SourceCodeInfo } from "./SourceCodeInfo";

export class FileDescriptorProto {
  static encode(message: FileDescriptorProto, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(18);
    writer.string(message.package);

    const dependency = message.dependency;
    if (dependency.length !== 0) {
      for (let i: i32 = 0; i < dependency.length; ++i) {
        writer.uint32(26);
        writer.string(dependency[i]);
      }
    }

    const publicDependency = message.publicDependency;
    if (publicDependency.length !== 0) {
      for (let i: i32 = 0; i < publicDependency.length; ++i) {
        writer.uint32(80);
        writer.int32(publicDependency[i]);
      }
    }

    const weakDependency = message.weakDependency;
    if (weakDependency.length !== 0) {
      for (let i: i32 = 0; i < weakDependency.length; ++i) {
        writer.uint32(88);
        writer.int32(weakDependency[i]);
      }
    }

    const messageType = message.messageType;
    for (let i: i32 = 0; i < messageType.length; ++i) {
      writer.uint32(34);
      writer.fork();
      DescriptorProto.encode(messageType[i], writer);
      writer.ldelim();
    }

    const enumType = message.enumType;
    for (let i: i32 = 0; i < enumType.length; ++i) {
      writer.uint32(42);
      writer.fork();
      EnumDescriptorProto.encode(enumType[i], writer);
      writer.ldelim();
    }

    const service = message.service;
    for (let i: i32 = 0; i < service.length; ++i) {
      writer.uint32(50);
      writer.fork();
      ServiceDescriptorProto.encode(service[i], writer);
      writer.ldelim();
    }

    const extension = message.extension;
    for (let i: i32 = 0; i < extension.length; ++i) {
      writer.uint32(58);
      writer.fork();
      FieldDescriptorProto.encode(extension[i], writer);
      writer.ldelim();
    }

    const options = message.options;
    if (options !== null) {
      writer.uint32(66);
      writer.fork();
      FileOptions.encode(options, writer);
      writer.ldelim();
    }

    const sourceCodeInfo = message.sourceCodeInfo;
    if (sourceCodeInfo !== null) {
      writer.uint32(74);
      writer.fork();
      SourceCodeInfo.encode(sourceCodeInfo, writer);
      writer.ldelim();
    }

    writer.uint32(98);
    writer.string(message.syntax);

    writer.uint32(106);
    writer.string(message.edition);
  }

  static decode(reader: Reader, length: i32): FileDescriptorProto {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FileDescriptorProto();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.package = reader.string();
          break;

        case 3:
          message.dependency.push(reader.string());
          break;

        case 10:
          message.publicDependency.push(reader.int32());
          break;

        case 11:
          message.weakDependency.push(reader.int32());
          break;

        case 4:
          message.messageType.push(
            DescriptorProto.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.enumType.push(
            EnumDescriptorProto.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.service.push(
            ServiceDescriptorProto.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.extension.push(
            FieldDescriptorProto.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.options = FileOptions.decode(reader, reader.uint32());
          break;

        case 9:
          message.sourceCodeInfo = SourceCodeInfo.decode(
            reader,
            reader.uint32()
          );
          break;

        case 12:
          message.syntax = reader.string();
          break;

        case 13:
          message.edition = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  package: string;
  dependency: Array<string>;
  publicDependency: Array<i32>;
  weakDependency: Array<i32>;
  messageType: Array<DescriptorProto>;
  enumType: Array<EnumDescriptorProto>;
  service: Array<ServiceDescriptorProto>;
  extension: Array<FieldDescriptorProto>;
  options: FileOptions | null;
  sourceCodeInfo: SourceCodeInfo | null;
  syntax: string;
  edition: string;

  constructor(
    name: string = "",
    package: string = "",
    dependency: Array<string> = [],
    publicDependency: Array<i32> = [],
    weakDependency: Array<i32> = [],
    messageType: Array<DescriptorProto> = [],
    enumType: Array<EnumDescriptorProto> = [],
    service: Array<ServiceDescriptorProto> = [],
    extension: Array<FieldDescriptorProto> = [],
    options: FileOptions | null = null,
    sourceCodeInfo: SourceCodeInfo | null = null,
    syntax: string = "",
    edition: string = ""
  ) {
    this.name = name;
    this.package = package;
    this.dependency = dependency;
    this.publicDependency = publicDependency;
    this.weakDependency = weakDependency;
    this.messageType = messageType;
    this.enumType = enumType;
    this.service = service;
    this.extension = extension;
    this.options = options;
    this.sourceCodeInfo = sourceCodeInfo;
    this.syntax = syntax;
    this.edition = edition;
  }
}
