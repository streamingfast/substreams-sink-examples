// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Location } from "./SourceCodeInfo/Location";

export class SourceCodeInfo {
  static encode(message: SourceCodeInfo, writer: Writer): void {
    const location = message.location;
    for (let i: i32 = 0; i < location.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Location.encode(location[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SourceCodeInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SourceCodeInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.location.push(Location.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  location: Array<Location>;

  constructor(location: Array<Location> = []) {
    this.location = location;
  }
}
