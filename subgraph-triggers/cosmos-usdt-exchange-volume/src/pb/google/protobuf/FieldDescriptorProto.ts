// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { FieldOptions } from "./FieldOptions";
import { Label } from "./FieldDescriptorProto/Label";
import { Type } from "./FieldDescriptorProto/Type";

export class FieldDescriptorProto {
  static encode(message: FieldDescriptorProto, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(24);
    writer.int32(message.number);

    writer.uint32(32);
    writer.int32(message.label);

    writer.uint32(40);
    writer.int32(message.type);

    writer.uint32(50);
    writer.string(message.typeName);

    writer.uint32(18);
    writer.string(message.extendee);

    writer.uint32(58);
    writer.string(message.defaultValue);

    writer.uint32(72);
    writer.int32(message.oneofIndex);

    writer.uint32(82);
    writer.string(message.jsonName);

    const options = message.options;
    if (options !== null) {
      writer.uint32(66);
      writer.fork();
      FieldOptions.encode(options, writer);
      writer.ldelim();
    }

    writer.uint32(136);
    writer.bool(message.proto3Optional);
  }

  static decode(reader: Reader, length: i32): FieldDescriptorProto {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FieldDescriptorProto();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 3:
          message.number = reader.int32();
          break;

        case 4:
          message.label = reader.int32();
          break;

        case 5:
          message.type = reader.int32();
          break;

        case 6:
          message.typeName = reader.string();
          break;

        case 2:
          message.extendee = reader.string();
          break;

        case 7:
          message.defaultValue = reader.string();
          break;

        case 9:
          message.oneofIndex = reader.int32();
          break;

        case 10:
          message.jsonName = reader.string();
          break;

        case 8:
          message.options = FieldOptions.decode(reader, reader.uint32());
          break;

        case 17:
          message.proto3Optional = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  number: i32;
  label: Label;
  type: Type;
  typeName: string;
  extendee: string;
  defaultValue: string;
  oneofIndex: i32;
  jsonName: string;
  options: FieldOptions | null;
  proto3Optional: bool;

  constructor(
    name: string = "",
    number: i32 = 0,
    label: Label = 0,
    type: Type = 0,
    typeName: string = "",
    extendee: string = "",
    defaultValue: string = "",
    oneofIndex: i32 = 0,
    jsonName: string = "",
    options: FieldOptions | null = null,
    proto3Optional: bool = false
  ) {
    this.name = name;
    this.number = number;
    this.label = label;
    this.type = type;
    this.typeName = typeName;
    this.extendee = extendee;
    this.defaultValue = defaultValue;
    this.oneofIndex = oneofIndex;
    this.jsonName = jsonName;
    this.options = options;
    this.proto3Optional = proto3Optional;
  }
}
