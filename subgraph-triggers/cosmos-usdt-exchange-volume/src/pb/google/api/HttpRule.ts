// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { CustomHttpPattern } from "./CustomHttpPattern";

export class HttpRule {
  static encode(message: HttpRule, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.selector);

    writer.uint32(18);
    writer.string(message.get);

    writer.uint32(26);
    writer.string(message.put);

    writer.uint32(34);
    writer.string(message.post);

    writer.uint32(42);
    writer.string(message.delete);

    writer.uint32(50);
    writer.string(message.patch);

    const custom = message.custom;
    if (custom !== null) {
      writer.uint32(66);
      writer.fork();
      CustomHttpPattern.encode(custom, writer);
      writer.ldelim();
    }

    writer.uint32(58);
    writer.string(message.body);

    writer.uint32(98);
    writer.string(message.responseBody);

    const additionalBindings = message.additionalBindings;
    for (let i: i32 = 0; i < additionalBindings.length; ++i) {
      writer.uint32(90);
      writer.fork();
      HttpRule.encode(additionalBindings[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): HttpRule {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new HttpRule();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.selector = reader.string();
          break;

        case 2:
          message.get = reader.string();
          break;

        case 3:
          message.put = reader.string();
          break;

        case 4:
          message.post = reader.string();
          break;

        case 5:
          message.delete = reader.string();
          break;

        case 6:
          message.patch = reader.string();
          break;

        case 8:
          message.custom = CustomHttpPattern.decode(reader, reader.uint32());
          break;

        case 7:
          message.body = reader.string();
          break;

        case 12:
          message.responseBody = reader.string();
          break;

        case 11:
          message.additionalBindings.push(
            HttpRule.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  selector: string;
  get: string;
  put: string;
  post: string;
  delete: string;
  patch: string;
  custom: CustomHttpPattern | null;
  body: string;
  responseBody: string;
  additionalBindings: Array<HttpRule>;

  constructor(
    selector: string = "",
    get: string = "",
    put: string = "",
    post: string = "",
    delete_: string = "",
    patch: string = "",
    custom: CustomHttpPattern | null = null,
    body: string = "",
    responseBody: string = "",
    additionalBindings: Array<HttpRule> = []
  ) {
    this.selector = selector;
    this.get = get;
    this.put = put;
    this.post = post;
    this.delete = delete_;
    this.patch = patch;
    this.custom = custom;
    this.body = body;
    this.responseBody = responseBody;
    this.additionalBindings = additionalBindings;
  }
}
