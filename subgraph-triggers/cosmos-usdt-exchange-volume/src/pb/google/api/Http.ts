// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { HttpRule } from "./HttpRule";

export class Http {
  static encode(message: Http, writer: Writer): void {
    const rules = message.rules;
    for (let i: i32 = 0; i < rules.length; ++i) {
      writer.uint32(10);
      writer.fork();
      HttpRule.encode(rules[i], writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.bool(message.fullyDecodeReservedExpansion);
  }

  static decode(reader: Reader, length: i32): Http {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Http();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.rules.push(HttpRule.decode(reader, reader.uint32()));
          break;

        case 2:
          message.fullyDecodeReservedExpansion = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  rules: Array<HttpRule>;
  fullyDecodeReservedExpansion: bool;

  constructor(
    rules: Array<HttpRule> = [],
    fullyDecodeReservedExpansion: bool = false
  ) {
    this.rules = rules;
    this.fullyDecodeReservedExpansion = fullyDecodeReservedExpansion;
  }
}
