// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { ScalarType } from "./ScalarType";

export class ScalarDescriptor {
  static encode(message: ScalarDescriptor, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(18);
    writer.string(message.description);

    const fieldType = message.fieldType;
    if (fieldType.length !== 0) {
      for (let i: i32 = 0; i < fieldType.length; ++i) {
        writer.uint32(24);
        writer.int32(fieldType[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): ScalarDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ScalarDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.description = reader.string();
          break;

        case 3:
          message.fieldType.push(reader.int32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  description: string;
  fieldType: Array<ScalarType>;

  constructor(
    name: string = "",
    description: string = "",
    fieldType: Array<ScalarType> = []
  ) {
    this.name = name;
    this.description = description;
    this.fieldType = fieldType;
  }
}
