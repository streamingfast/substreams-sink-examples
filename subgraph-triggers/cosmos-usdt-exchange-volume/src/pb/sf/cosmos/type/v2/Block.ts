// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Timestamp } from "../../../../google/protobuf/Timestamp";
import { Header } from "./Header";
import { Misbehavior } from "./Misbehavior";
import { Event } from "./Event";
import { TxResults } from "./TxResults";
import { ValidatorUpdate } from "./ValidatorUpdate";
import { ConsensusParams } from "./ConsensusParams";

export class Block {
  static encode(message: Block, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.hash);

    writer.uint32(16);
    writer.int64(message.height);

    const time = message.time;
    if (time !== null) {
      writer.uint32(26);
      writer.fork();
      Timestamp.encode(time, writer);
      writer.ldelim();
    }

    const header = message.header;
    if (header !== null) {
      writer.uint32(34);
      writer.fork();
      Header.encode(header, writer);
      writer.ldelim();
    }

    const misbehavior = message.misbehavior;
    for (let i: i32 = 0; i < misbehavior.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Misbehavior.encode(misbehavior[i], writer);
      writer.ldelim();
    }

    const events = message.events;
    for (let i: i32 = 0; i < events.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Event.encode(events[i], writer);
      writer.ldelim();
    }

    const txs = message.txs;
    if (txs.length !== 0) {
      for (let i: i32 = 0; i < txs.length; ++i) {
        writer.uint32(66);
        writer.bytes(txs[i]);
      }
    }

    const txResults = message.txResults;
    for (let i: i32 = 0; i < txResults.length; ++i) {
      writer.uint32(74);
      writer.fork();
      TxResults.encode(txResults[i], writer);
      writer.ldelim();
    }

    const validatorUpdates = message.validatorUpdates;
    for (let i: i32 = 0; i < validatorUpdates.length; ++i) {
      writer.uint32(82);
      writer.fork();
      ValidatorUpdate.encode(validatorUpdates[i], writer);
      writer.ldelim();
    }

    const consensusParamUpdates = message.consensusParamUpdates;
    if (consensusParamUpdates !== null) {
      writer.uint32(90);
      writer.fork();
      ConsensusParams.encode(consensusParamUpdates, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Block {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Block();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.bytes();
          break;

        case 2:
          message.height = reader.int64();
          break;

        case 3:
          message.time = Timestamp.decode(reader, reader.uint32());
          break;

        case 4:
          message.header = Header.decode(reader, reader.uint32());
          break;

        case 6:
          message.misbehavior.push(Misbehavior.decode(reader, reader.uint32()));
          break;

        case 7:
          message.events.push(Event.decode(reader, reader.uint32()));
          break;

        case 8:
          message.txs.push(reader.bytes());
          break;

        case 9:
          message.txResults.push(TxResults.decode(reader, reader.uint32()));
          break;

        case 10:
          message.validatorUpdates.push(
            ValidatorUpdate.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.consensusParamUpdates = ConsensusParams.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: Uint8Array;
  height: i64;
  time: Timestamp | null;
  header: Header | null;
  misbehavior: Array<Misbehavior>;
  events: Array<Event>;
  txs: Array<Uint8Array>;
  txResults: Array<TxResults>;
  validatorUpdates: Array<ValidatorUpdate>;
  consensusParamUpdates: ConsensusParams | null;

  constructor(
    hash: Uint8Array = new Uint8Array(0),
    height: i64 = 0,
    time: Timestamp | null = null,
    header: Header | null = null,
    misbehavior: Array<Misbehavior> = [],
    events: Array<Event> = [],
    txs: Array<Uint8Array> = [],
    txResults: Array<TxResults> = [],
    validatorUpdates: Array<ValidatorUpdate> = [],
    consensusParamUpdates: ConsensusParams | null = null
  ) {
    this.hash = hash;
    this.height = height;
    this.time = time;
    this.header = header;
    this.misbehavior = misbehavior;
    this.events = events;
    this.txs = txs;
    this.txResults = txResults;
    this.validatorUpdates = validatorUpdates;
    this.consensusParamUpdates = consensusParamUpdates;
  }
}
