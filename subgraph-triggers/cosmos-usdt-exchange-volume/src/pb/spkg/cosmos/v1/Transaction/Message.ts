// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../../google/protobuf/Any";
import { MsgExec } from "../../../../cosmos/authz/v1beta1/MsgExec";
import { MsgSend } from "../../../../cosmos/bank/v1beta1/MsgSend";
import { MsgMultiSend } from "../../../../cosmos/bank/v1beta1/MsgMultiSend";
import { MsgVerifyInvariant } from "../../../../cosmos/crisis/v1beta1/MsgVerifyInvariant";
import { MsgWithdrawDelegatorReward } from "../../../../cosmos/distribution/v1beta1/MsgWithdrawDelegatorReward";
import { MsgWithdrawValidatorCommission } from "../../../../cosmos/distribution/v1beta1/MsgWithdrawValidatorCommission";
import { MsgSetWithdrawAddress } from "../../../../cosmos/distribution/v1beta1/MsgSetWithdrawAddress";
import { MsgFundCommunityPool } from "../../../../cosmos/distribution/v1beta1/MsgFundCommunityPool";
import { MsgSubmitEvidence } from "../../../../cosmos/evidence/v1beta1/MsgSubmitEvidence";
import { MsgSubmitProposal } from "../../../../cosmos/gov/v1beta1/MsgSubmitProposal";
import { MsgVote } from "../../../../cosmos/gov/v1beta1/MsgVote";
import { MsgDeposit } from "../../../../cosmos/gov/v1beta1/MsgDeposit";
import { MsgUnjail } from "../../../../cosmos/slashing/v1beta1/MsgUnjail";
import { MsgBid } from "../../../../injective/auction/v1beta1/MsgBid";
import { PubKey } from "../../../../injective/crypto/v1beta1/ethsecp256k1/PubKey";
import { PrivKey } from "../../../../injective/crypto/v1beta1/ethsecp256k1/PrivKey";
import { MsgDeposit as MsgDeposit_2 } from "../../../../injective/exchange/v1beta1/MsgDeposit";
import { MsgRequestBatch } from "../../../../injective/peggy/v1/MsgRequestBatch";
import { MsgRegisterContract } from "../../../../injective/wasmx/v1/MsgRegisterContract";
import { MsgExecuteContractCompat } from "../../../../injective/wasmx/v1/MsgExecuteContractCompat";
import { MsgExecuteContract } from "../../../../cosmwasm/wasm/v1/MsgExecuteContract";

export class Message {
  static encode(message: Message, writer: Writer): void {
    const other = message.other;
    if (other !== null) {
      writer.uint32(802);
      writer.fork();
      Any.encode(other, writer);
      writer.ldelim();
    }

    const msgExec = message.msgExec;
    if (msgExec !== null) {
      writer.uint32(810);
      writer.fork();
      MsgExec.encode(msgExec, writer);
      writer.ldelim();
    }

    const msgSend = message.msgSend;
    if (msgSend !== null) {
      writer.uint32(818);
      writer.fork();
      MsgSend.encode(msgSend, writer);
      writer.ldelim();
    }

    const msgMultiSend = message.msgMultiSend;
    if (msgMultiSend !== null) {
      writer.uint32(826);
      writer.fork();
      MsgMultiSend.encode(msgMultiSend, writer);
      writer.ldelim();
    }

    const msgVerifyInvariant = message.msgVerifyInvariant;
    if (msgVerifyInvariant !== null) {
      writer.uint32(834);
      writer.fork();
      MsgVerifyInvariant.encode(msgVerifyInvariant, writer);
      writer.ldelim();
    }

    const msgWithdrawDelegatorReward = message.msgWithdrawDelegatorReward;
    if (msgWithdrawDelegatorReward !== null) {
      writer.uint32(842);
      writer.fork();
      MsgWithdrawDelegatorReward.encode(msgWithdrawDelegatorReward, writer);
      writer.ldelim();
    }

    const msgWithdrawValidatorCommission =
      message.msgWithdrawValidatorCommission;
    if (msgWithdrawValidatorCommission !== null) {
      writer.uint32(850);
      writer.fork();
      MsgWithdrawValidatorCommission.encode(
        msgWithdrawValidatorCommission,
        writer
      );
      writer.ldelim();
    }

    const msgSetWithdrawAddress = message.msgSetWithdrawAddress;
    if (msgSetWithdrawAddress !== null) {
      writer.uint32(858);
      writer.fork();
      MsgSetWithdrawAddress.encode(msgSetWithdrawAddress, writer);
      writer.ldelim();
    }

    const msgFundCommunityPool = message.msgFundCommunityPool;
    if (msgFundCommunityPool !== null) {
      writer.uint32(866);
      writer.fork();
      MsgFundCommunityPool.encode(msgFundCommunityPool, writer);
      writer.ldelim();
    }

    const msgSubmitEvidence = message.msgSubmitEvidence;
    if (msgSubmitEvidence !== null) {
      writer.uint32(874);
      writer.fork();
      MsgSubmitEvidence.encode(msgSubmitEvidence, writer);
      writer.ldelim();
    }

    const msgSubmitProposal = message.msgSubmitProposal;
    if (msgSubmitProposal !== null) {
      writer.uint32(882);
      writer.fork();
      MsgSubmitProposal.encode(msgSubmitProposal, writer);
      writer.ldelim();
    }

    const msgVote = message.msgVote;
    if (msgVote !== null) {
      writer.uint32(890);
      writer.fork();
      MsgVote.encode(msgVote, writer);
      writer.ldelim();
    }

    const msgDeposit = message.msgDeposit;
    if (msgDeposit !== null) {
      writer.uint32(898);
      writer.fork();
      MsgDeposit.encode(msgDeposit, writer);
      writer.ldelim();
    }

    const msgUnjail = message.msgUnjail;
    if (msgUnjail !== null) {
      writer.uint32(906);
      writer.fork();
      MsgUnjail.encode(msgUnjail, writer);
      writer.ldelim();
    }

    const msgBid = message.msgBid;
    if (msgBid !== null) {
      writer.uint32(914);
      writer.fork();
      MsgBid.encode(msgBid, writer);
      writer.ldelim();
    }

    const pubKey = message.pubKey;
    if (pubKey !== null) {
      writer.uint32(922);
      writer.fork();
      PubKey.encode(pubKey, writer);
      writer.ldelim();
    }

    const privKey = message.privKey;
    if (privKey !== null) {
      writer.uint32(930);
      writer.fork();
      PrivKey.encode(privKey, writer);
      writer.ldelim();
    }

    const injMsgDeposit = message.injMsgDeposit;
    if (injMsgDeposit !== null) {
      writer.uint32(938);
      writer.fork();
      MsgDeposit_2.encode(injMsgDeposit, writer);
      writer.ldelim();
    }

    const msgRequestBatch = message.msgRequestBatch;
    if (msgRequestBatch !== null) {
      writer.uint32(946);
      writer.fork();
      MsgRequestBatch.encode(msgRequestBatch, writer);
      writer.ldelim();
    }

    const msgRegisterContract = message.msgRegisterContract;
    if (msgRegisterContract !== null) {
      writer.uint32(954);
      writer.fork();
      MsgRegisterContract.encode(msgRegisterContract, writer);
      writer.ldelim();
    }

    const msgExecuteContractCompat = message.msgExecuteContractCompat;
    if (msgExecuteContractCompat !== null) {
      writer.uint32(962);
      writer.fork();
      MsgExecuteContractCompat.encode(msgExecuteContractCompat, writer);
      writer.ldelim();
    }

    const msgExecuteContract = message.msgExecuteContract;
    if (msgExecuteContract !== null) {
      writer.uint32(970);
      writer.fork();
      MsgExecuteContract.encode(msgExecuteContract, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Message {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Message();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100:
          message.other = Any.decode(reader, reader.uint32());
          break;

        case 101:
          message.msgExec = MsgExec.decode(reader, reader.uint32());
          break;

        case 102:
          message.msgSend = MsgSend.decode(reader, reader.uint32());
          break;

        case 103:
          message.msgMultiSend = MsgMultiSend.decode(reader, reader.uint32());
          break;

        case 104:
          message.msgVerifyInvariant = MsgVerifyInvariant.decode(
            reader,
            reader.uint32()
          );
          break;

        case 105:
          message.msgWithdrawDelegatorReward =
            MsgWithdrawDelegatorReward.decode(reader, reader.uint32());
          break;

        case 106:
          message.msgWithdrawValidatorCommission =
            MsgWithdrawValidatorCommission.decode(reader, reader.uint32());
          break;

        case 107:
          message.msgSetWithdrawAddress = MsgSetWithdrawAddress.decode(
            reader,
            reader.uint32()
          );
          break;

        case 108:
          message.msgFundCommunityPool = MsgFundCommunityPool.decode(
            reader,
            reader.uint32()
          );
          break;

        case 109:
          message.msgSubmitEvidence = MsgSubmitEvidence.decode(
            reader,
            reader.uint32()
          );
          break;

        case 110:
          message.msgSubmitProposal = MsgSubmitProposal.decode(
            reader,
            reader.uint32()
          );
          break;

        case 111:
          message.msgVote = MsgVote.decode(reader, reader.uint32());
          break;

        case 112:
          message.msgDeposit = MsgDeposit.decode(reader, reader.uint32());
          break;

        case 113:
          message.msgUnjail = MsgUnjail.decode(reader, reader.uint32());
          break;

        case 114:
          message.msgBid = MsgBid.decode(reader, reader.uint32());
          break;

        case 115:
          message.pubKey = PubKey.decode(reader, reader.uint32());
          break;

        case 116:
          message.privKey = PrivKey.decode(reader, reader.uint32());
          break;

        case 117:
          message.injMsgDeposit = MsgDeposit_2.decode(reader, reader.uint32());
          break;

        case 118:
          message.msgRequestBatch = MsgRequestBatch.decode(
            reader,
            reader.uint32()
          );
          break;

        case 119:
          message.msgRegisterContract = MsgRegisterContract.decode(
            reader,
            reader.uint32()
          );
          break;

        case 120:
          message.msgExecuteContractCompat = MsgExecuteContractCompat.decode(
            reader,
            reader.uint32()
          );
          break;

        case 121:
          message.msgExecuteContract = MsgExecuteContract.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  other: Any | null;
  msgExec: MsgExec | null;
  msgSend: MsgSend | null;
  msgMultiSend: MsgMultiSend | null;
  msgVerifyInvariant: MsgVerifyInvariant | null;
  msgWithdrawDelegatorReward: MsgWithdrawDelegatorReward | null;
  msgWithdrawValidatorCommission: MsgWithdrawValidatorCommission | null;
  msgSetWithdrawAddress: MsgSetWithdrawAddress | null;
  msgFundCommunityPool: MsgFundCommunityPool | null;
  msgSubmitEvidence: MsgSubmitEvidence | null;
  msgSubmitProposal: MsgSubmitProposal | null;
  msgVote: MsgVote | null;
  msgDeposit: MsgDeposit | null;
  msgUnjail: MsgUnjail | null;
  msgBid: MsgBid | null;
  pubKey: PubKey | null;
  privKey: PrivKey | null;
  injMsgDeposit: MsgDeposit_2 | null;
  msgRequestBatch: MsgRequestBatch | null;
  msgRegisterContract: MsgRegisterContract | null;
  msgExecuteContractCompat: MsgExecuteContractCompat | null;
  msgExecuteContract: MsgExecuteContract | null;

  constructor(
    other: Any | null = null,
    msgExec: MsgExec | null = null,
    msgSend: MsgSend | null = null,
    msgMultiSend: MsgMultiSend | null = null,
    msgVerifyInvariant: MsgVerifyInvariant | null = null,
    msgWithdrawDelegatorReward: MsgWithdrawDelegatorReward | null = null,
    msgWithdrawValidatorCommission: MsgWithdrawValidatorCommission | null = null,
    msgSetWithdrawAddress: MsgSetWithdrawAddress | null = null,
    msgFundCommunityPool: MsgFundCommunityPool | null = null,
    msgSubmitEvidence: MsgSubmitEvidence | null = null,
    msgSubmitProposal: MsgSubmitProposal | null = null,
    msgVote: MsgVote | null = null,
    msgDeposit: MsgDeposit | null = null,
    msgUnjail: MsgUnjail | null = null,
    msgBid: MsgBid | null = null,
    pubKey: PubKey | null = null,
    privKey: PrivKey | null = null,
    injMsgDeposit: MsgDeposit_2 | null = null,
    msgRequestBatch: MsgRequestBatch | null = null,
    msgRegisterContract: MsgRegisterContract | null = null,
    msgExecuteContractCompat: MsgExecuteContractCompat | null = null,
    msgExecuteContract: MsgExecuteContract | null = null
  ) {
    this.other = other;
    this.msgExec = msgExec;
    this.msgSend = msgSend;
    this.msgMultiSend = msgMultiSend;
    this.msgVerifyInvariant = msgVerifyInvariant;
    this.msgWithdrawDelegatorReward = msgWithdrawDelegatorReward;
    this.msgWithdrawValidatorCommission = msgWithdrawValidatorCommission;
    this.msgSetWithdrawAddress = msgSetWithdrawAddress;
    this.msgFundCommunityPool = msgFundCommunityPool;
    this.msgSubmitEvidence = msgSubmitEvidence;
    this.msgSubmitProposal = msgSubmitProposal;
    this.msgVote = msgVote;
    this.msgDeposit = msgDeposit;
    this.msgUnjail = msgUnjail;
    this.msgBid = msgBid;
    this.pubKey = pubKey;
    this.privKey = privKey;
    this.injMsgDeposit = injMsgDeposit;
    this.msgRequestBatch = msgRequestBatch;
    this.msgRegisterContract = msgRegisterContract;
    this.msgExecuteContractCompat = msgExecuteContractCompat;
    this.msgExecuteContract = msgExecuteContract;
  }
}
