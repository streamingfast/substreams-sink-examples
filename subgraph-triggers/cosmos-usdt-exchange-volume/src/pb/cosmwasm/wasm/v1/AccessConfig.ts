// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { AccessType } from "./AccessType";

export class AccessConfig {
  static encode(message: AccessConfig, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.permission);

    const addresses = message.addresses;
    if (addresses.length !== 0) {
      for (let i: i32 = 0; i < addresses.length; ++i) {
        writer.uint32(26);
        writer.string(addresses[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): AccessConfig {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AccessConfig();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.permission = reader.int32();
          break;

        case 3:
          message.addresses.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  permission: AccessType;
  addresses: Array<string>;

  constructor(permission: AccessType = 0, addresses: Array<string> = []) {
    this.permission = permission;
    this.addresses = addresses;
  }
}
