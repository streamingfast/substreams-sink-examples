// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { AccessConfig } from "./AccessConfig";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class StoreAndInstantiateContractProposal {
  static encode(
    message: StoreAndInstantiateContractProposal,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.title);

    writer.uint32(18);
    writer.string(message.description);

    writer.uint32(26);
    writer.string(message.runAs);

    writer.uint32(34);
    writer.bytes(message.wasmByteCode);

    const instantiatePermission = message.instantiatePermission;
    if (instantiatePermission !== null) {
      writer.uint32(42);
      writer.fork();
      AccessConfig.encode(instantiatePermission, writer);
      writer.ldelim();
    }

    writer.uint32(48);
    writer.bool(message.unpinCode);

    writer.uint32(58);
    writer.string(message.admin);

    writer.uint32(66);
    writer.string(message.label);

    writer.uint32(74);
    writer.bytes(message.msg);

    const funds = message.funds;
    for (let i: i32 = 0; i < funds.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Coin.encode(funds[i], writer);
      writer.ldelim();
    }

    writer.uint32(90);
    writer.string(message.source);

    writer.uint32(98);
    writer.string(message.builder);

    writer.uint32(106);
    writer.bytes(message.codeHash);
  }

  static decode(
    reader: Reader,
    length: i32
  ): StoreAndInstantiateContractProposal {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StoreAndInstantiateContractProposal();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.title = reader.string();
          break;

        case 2:
          message.description = reader.string();
          break;

        case 3:
          message.runAs = reader.string();
          break;

        case 4:
          message.wasmByteCode = reader.bytes();
          break;

        case 5:
          message.instantiatePermission = AccessConfig.decode(
            reader,
            reader.uint32()
          );
          break;

        case 6:
          message.unpinCode = reader.bool();
          break;

        case 7:
          message.admin = reader.string();
          break;

        case 8:
          message.label = reader.string();
          break;

        case 9:
          message.msg = reader.bytes();
          break;

        case 10:
          message.funds.push(Coin.decode(reader, reader.uint32()));
          break;

        case 11:
          message.source = reader.string();
          break;

        case 12:
          message.builder = reader.string();
          break;

        case 13:
          message.codeHash = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  title: string;
  description: string;
  runAs: string;
  wasmByteCode: Uint8Array;
  instantiatePermission: AccessConfig | null;
  unpinCode: bool;
  admin: string;
  label: string;
  msg: Uint8Array;
  funds: Array<Coin>;
  source: string;
  builder: string;
  codeHash: Uint8Array;

  constructor(
    title: string = "",
    description: string = "",
    runAs: string = "",
    wasmByteCode: Uint8Array = new Uint8Array(0),
    instantiatePermission: AccessConfig | null = null,
    unpinCode: bool = false,
    admin: string = "",
    label: string = "",
    msg: Uint8Array = new Uint8Array(0),
    funds: Array<Coin> = [],
    source: string = "",
    builder: string = "",
    codeHash: Uint8Array = new Uint8Array(0)
  ) {
    this.title = title;
    this.description = description;
    this.runAs = runAs;
    this.wasmByteCode = wasmByteCode;
    this.instantiatePermission = instantiatePermission;
    this.unpinCode = unpinCode;
    this.admin = admin;
    this.label = label;
    this.msg = msg;
    this.funds = funds;
    this.source = source;
    this.builder = builder;
    this.codeHash = codeHash;
  }
}
