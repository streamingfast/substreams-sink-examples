// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class ExecuteContractProposal {
  static encode(message: ExecuteContractProposal, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.title);

    writer.uint32(18);
    writer.string(message.description);

    writer.uint32(26);
    writer.string(message.runAs);

    writer.uint32(34);
    writer.string(message.contract);

    writer.uint32(42);
    writer.bytes(message.msg);

    const funds = message.funds;
    for (let i: i32 = 0; i < funds.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Coin.encode(funds[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ExecuteContractProposal {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ExecuteContractProposal();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.title = reader.string();
          break;

        case 2:
          message.description = reader.string();
          break;

        case 3:
          message.runAs = reader.string();
          break;

        case 4:
          message.contract = reader.string();
          break;

        case 5:
          message.msg = reader.bytes();
          break;

        case 6:
          message.funds.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  title: string;
  description: string;
  runAs: string;
  contract: string;
  msg: Uint8Array;
  funds: Array<Coin>;

  constructor(
    title: string = "",
    description: string = "",
    runAs: string = "",
    contract: string = "",
    msg: Uint8Array = new Uint8Array(0),
    funds: Array<Coin> = []
  ) {
    this.title = title;
    this.description = description;
    this.runAs = runAs;
    this.contract = contract;
    this.msg = msg;
    this.funds = funds;
  }
}
