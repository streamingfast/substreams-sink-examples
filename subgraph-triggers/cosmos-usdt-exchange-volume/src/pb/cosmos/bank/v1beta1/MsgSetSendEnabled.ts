// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { SendEnabled } from "./SendEnabled";

export class MsgSetSendEnabled {
  static encode(message: MsgSetSendEnabled, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.authority);

    const sendEnabled = message.sendEnabled;
    for (let i: i32 = 0; i < sendEnabled.length; ++i) {
      writer.uint32(18);
      writer.fork();
      SendEnabled.encode(sendEnabled[i], writer);
      writer.ldelim();
    }

    const useDefaultFor = message.useDefaultFor;
    if (useDefaultFor.length !== 0) {
      for (let i: i32 = 0; i < useDefaultFor.length; ++i) {
        writer.uint32(26);
        writer.string(useDefaultFor[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): MsgSetSendEnabled {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSetSendEnabled();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.authority = reader.string();
          break;

        case 2:
          message.sendEnabled.push(SendEnabled.decode(reader, reader.uint32()));
          break;

        case 3:
          message.useDefaultFor.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  authority: string;
  sendEnabled: Array<SendEnabled>;
  useDefaultFor: Array<string>;

  constructor(
    authority: string = "",
    sendEnabled: Array<SendEnabled> = [],
    useDefaultFor: Array<string> = []
  ) {
    this.authority = authority;
    this.sendEnabled = sendEnabled;
    this.useDefaultFor = useDefaultFor;
  }
}
