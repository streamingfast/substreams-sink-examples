// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { SendEnabled } from "./SendEnabled";

export class Params {
  static encode(message: Params, writer: Writer): void {
    const sendEnabled = message.sendEnabled;
    for (let i: i32 = 0; i < sendEnabled.length; ++i) {
      writer.uint32(10);
      writer.fork();
      SendEnabled.encode(sendEnabled[i], writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.bool(message.defaultSendEnabled);
  }

  static decode(reader: Reader, length: i32): Params {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Params();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sendEnabled.push(SendEnabled.decode(reader, reader.uint32()));
          break;

        case 2:
          message.defaultSendEnabled = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sendEnabled: Array<SendEnabled>;
  defaultSendEnabled: bool;

  constructor(
    sendEnabled: Array<SendEnabled> = [],
    defaultSendEnabled: bool = false
  ) {
    this.sendEnabled = sendEnabled;
    this.defaultSendEnabled = defaultSendEnabled;
  }
}
