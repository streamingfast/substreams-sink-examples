// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Input } from "./Input";
import { Output } from "./Output";

export class MsgMultiSend {
  static encode(message: MsgMultiSend, writer: Writer): void {
    const inputs = message.inputs;
    for (let i: i32 = 0; i < inputs.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Input.encode(inputs[i], writer);
      writer.ldelim();
    }

    const outputs = message.outputs;
    for (let i: i32 = 0; i < outputs.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Output.encode(outputs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgMultiSend {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgMultiSend();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.inputs.push(Input.decode(reader, reader.uint32()));
          break;

        case 2:
          message.outputs.push(Output.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  inputs: Array<Input>;
  outputs: Array<Output>;

  constructor(inputs: Array<Input> = [], outputs: Array<Output> = []) {
    this.inputs = inputs;
    this.outputs = outputs;
  }
}
