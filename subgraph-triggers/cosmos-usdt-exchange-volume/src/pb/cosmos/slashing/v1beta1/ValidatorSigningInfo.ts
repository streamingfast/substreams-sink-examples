// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Timestamp } from "../../../google/protobuf/Timestamp";

export class ValidatorSigningInfo {
  static encode(message: ValidatorSigningInfo, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.address);

    writer.uint32(16);
    writer.int64(message.startHeight);

    writer.uint32(24);
    writer.int64(message.indexOffset);

    const jailedUntil = message.jailedUntil;
    if (jailedUntil !== null) {
      writer.uint32(34);
      writer.fork();
      Timestamp.encode(jailedUntil, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.bool(message.tombstoned);

    writer.uint32(48);
    writer.int64(message.missedBlocksCounter);
  }

  static decode(reader: Reader, length: i32): ValidatorSigningInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ValidatorSigningInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;

        case 2:
          message.startHeight = reader.int64();
          break;

        case 3:
          message.indexOffset = reader.int64();
          break;

        case 4:
          message.jailedUntil = Timestamp.decode(reader, reader.uint32());
          break;

        case 5:
          message.tombstoned = reader.bool();
          break;

        case 6:
          message.missedBlocksCounter = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: string;
  startHeight: i64;
  indexOffset: i64;
  jailedUntil: Timestamp | null;
  tombstoned: bool;
  missedBlocksCounter: i64;

  constructor(
    address: string = "",
    startHeight: i64 = 0,
    indexOffset: i64 = 0,
    jailedUntil: Timestamp | null = null,
    tombstoned: bool = false,
    missedBlocksCounter: i64 = 0
  ) {
    this.address = address;
    this.startHeight = startHeight;
    this.indexOffset = indexOffset;
    this.jailedUntil = jailedUntil;
    this.tombstoned = tombstoned;
    this.missedBlocksCounter = missedBlocksCounter;
  }
}
