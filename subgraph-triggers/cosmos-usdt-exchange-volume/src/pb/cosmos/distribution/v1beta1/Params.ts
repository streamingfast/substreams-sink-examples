// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Params {
  static encode(message: Params, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.communityTax);

    writer.uint32(18);
    writer.string(message.baseProposerReward);

    writer.uint32(26);
    writer.string(message.bonusProposerReward);

    writer.uint32(32);
    writer.bool(message.withdrawAddrEnabled);
  }

  static decode(reader: Reader, length: i32): Params {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Params();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.communityTax = reader.string();
          break;

        case 2:
          message.baseProposerReward = reader.string();
          break;

        case 3:
          message.bonusProposerReward = reader.string();
          break;

        case 4:
          message.withdrawAddrEnabled = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  communityTax: string;
  baseProposerReward: string;
  bonusProposerReward: string;
  withdrawAddrEnabled: bool;

  constructor(
    communityTax: string = "",
    baseProposerReward: string = "",
    bonusProposerReward: string = "",
    withdrawAddrEnabled: bool = false
  ) {
    this.communityTax = communityTax;
    this.baseProposerReward = baseProposerReward;
    this.bonusProposerReward = bonusProposerReward;
    this.withdrawAddrEnabled = withdrawAddrEnabled;
  }
}
