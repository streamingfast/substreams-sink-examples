// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { DecCoin } from "../../base/v1beta1/DecCoin";

export class FeePool {
  static encode(message: FeePool, writer: Writer): void {
    const communityPool = message.communityPool;
    for (let i: i32 = 0; i < communityPool.length; ++i) {
      writer.uint32(10);
      writer.fork();
      DecCoin.encode(communityPool[i], writer);
      writer.ldelim();
    }

    const decimalPool = message.decimalPool;
    for (let i: i32 = 0; i < decimalPool.length; ++i) {
      writer.uint32(18);
      writer.fork();
      DecCoin.encode(decimalPool[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): FeePool {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FeePool();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.communityPool.push(DecCoin.decode(reader, reader.uint32()));
          break;

        case 2:
          message.decimalPool.push(DecCoin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  communityPool: Array<DecCoin>;
  decimalPool: Array<DecCoin>;

  constructor(
    communityPool: Array<DecCoin> = [],
    decimalPool: Array<DecCoin> = []
  ) {
    this.communityPool = communityPool;
    this.decimalPool = decimalPool;
  }
}
