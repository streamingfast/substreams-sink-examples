// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../base/v1beta1/Coin";

export class Fee {
  static encode(message: Fee, writer: Writer): void {
    const amount = message.amount;
    for (let i: i32 = 0; i < amount.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Coin.encode(amount[i], writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.uint64(message.gasLimit);

    writer.uint32(26);
    writer.string(message.payer);

    writer.uint32(34);
    writer.string(message.granter);
  }

  static decode(reader: Reader, length: i32): Fee {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Fee();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.amount.push(Coin.decode(reader, reader.uint32()));
          break;

        case 2:
          message.gasLimit = reader.uint64();
          break;

        case 3:
          message.payer = reader.string();
          break;

        case 4:
          message.granter = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  amount: Array<Coin>;
  gasLimit: u64;
  payer: string;
  granter: string;

  constructor(
    amount: Array<Coin> = [],
    gasLimit: u64 = 0,
    payer: string = "",
    granter: string = ""
  ) {
    this.amount = amount;
    this.gasLimit = gasLimit;
    this.payer = payer;
    this.granter = granter;
  }
}
