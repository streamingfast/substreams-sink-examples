// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { SignerInfo } from "./SignerInfo";
import { Fee } from "./Fee";
import { Tip } from "./Tip";

export class AuthInfo {
  static encode(message: AuthInfo, writer: Writer): void {
    const signerInfos = message.signerInfos;
    for (let i: i32 = 0; i < signerInfos.length; ++i) {
      writer.uint32(10);
      writer.fork();
      SignerInfo.encode(signerInfos[i], writer);
      writer.ldelim();
    }

    const fee = message.fee;
    if (fee !== null) {
      writer.uint32(18);
      writer.fork();
      Fee.encode(fee, writer);
      writer.ldelim();
    }

    const tip = message.tip;
    if (tip !== null) {
      writer.uint32(26);
      writer.fork();
      Tip.encode(tip, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): AuthInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AuthInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signerInfos.push(SignerInfo.decode(reader, reader.uint32()));
          break;

        case 2:
          message.fee = Fee.decode(reader, reader.uint32());
          break;

        case 3:
          message.tip = Tip.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  signerInfos: Array<SignerInfo>;
  fee: Fee | null;
  tip: Tip | null;

  constructor(
    signerInfos: Array<SignerInfo> = [],
    fee: Fee | null = null,
    tip: Tip | null = null
  ) {
    this.signerInfos = signerInfos;
    this.fee = fee;
    this.tip = tip;
  }
}
