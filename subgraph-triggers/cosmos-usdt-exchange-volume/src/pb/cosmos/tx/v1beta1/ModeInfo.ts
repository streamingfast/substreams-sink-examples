// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Single } from "./ModeInfo/Single";
import { Multi } from "./ModeInfo/Multi";

export class ModeInfo {
  static encode(message: ModeInfo, writer: Writer): void {
    const single = message.single;
    if (single !== null) {
      writer.uint32(10);
      writer.fork();
      Single.encode(single, writer);
      writer.ldelim();
    }

    const multi = message.multi;
    if (multi !== null) {
      writer.uint32(18);
      writer.fork();
      Multi.encode(multi, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ModeInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ModeInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.single = Single.decode(reader, reader.uint32());
          break;

        case 2:
          message.multi = Multi.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  single: Single | null;
  multi: Multi | null;

  constructor(single: Single | null = null, multi: Multi | null = null) {
    this.single = single;
    this.multi = multi;
  }
}
