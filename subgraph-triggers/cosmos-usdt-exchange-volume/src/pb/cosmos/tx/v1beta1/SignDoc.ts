// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class SignDoc {
  static encode(message: SignDoc, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.bodyBytes);

    writer.uint32(18);
    writer.bytes(message.authInfoBytes);

    writer.uint32(26);
    writer.string(message.chainId);

    writer.uint32(32);
    writer.uint64(message.accountNumber);
  }

  static decode(reader: Reader, length: i32): SignDoc {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SignDoc();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bodyBytes = reader.bytes();
          break;

        case 2:
          message.authInfoBytes = reader.bytes();
          break;

        case 3:
          message.chainId = reader.string();
          break;

        case 4:
          message.accountNumber = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  bodyBytes: Uint8Array;
  authInfoBytes: Uint8Array;
  chainId: string;
  accountNumber: u64;

  constructor(
    bodyBytes: Uint8Array = new Uint8Array(0),
    authInfoBytes: Uint8Array = new Uint8Array(0),
    chainId: string = "",
    accountNumber: u64 = 0
  ) {
    this.bodyBytes = bodyBytes;
    this.authInfoBytes = authInfoBytes;
    this.chainId = chainId;
    this.accountNumber = accountNumber;
  }
}
