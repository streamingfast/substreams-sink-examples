// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../google/protobuf/Any";
import { Tip } from "./Tip";

export class SignDocDirectAux {
  static encode(message: SignDocDirectAux, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.bodyBytes);

    const publicKey = message.publicKey;
    if (publicKey !== null) {
      writer.uint32(18);
      writer.fork();
      Any.encode(publicKey, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.chainId);

    writer.uint32(32);
    writer.uint64(message.accountNumber);

    writer.uint32(40);
    writer.uint64(message.sequence);

    const tip = message.tip;
    if (tip !== null) {
      writer.uint32(50);
      writer.fork();
      Tip.encode(tip, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SignDocDirectAux {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SignDocDirectAux();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bodyBytes = reader.bytes();
          break;

        case 2:
          message.publicKey = Any.decode(reader, reader.uint32());
          break;

        case 3:
          message.chainId = reader.string();
          break;

        case 4:
          message.accountNumber = reader.uint64();
          break;

        case 5:
          message.sequence = reader.uint64();
          break;

        case 6:
          message.tip = Tip.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  bodyBytes: Uint8Array;
  publicKey: Any | null;
  chainId: string;
  accountNumber: u64;
  sequence: u64;
  tip: Tip | null;

  constructor(
    bodyBytes: Uint8Array = new Uint8Array(0),
    publicKey: Any | null = null,
    chainId: string = "",
    accountNumber: u64 = 0,
    sequence: u64 = 0,
    tip: Tip | null = null
  ) {
    this.bodyBytes = bodyBytes;
    this.publicKey = publicKey;
    this.chainId = chainId;
    this.accountNumber = accountNumber;
    this.sequence = sequence;
    this.tip = tip;
  }
}
