// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { TxBody } from "./TxBody";
import { AuthInfo } from "./AuthInfo";

export class Tx {
  static encode(message: Tx, writer: Writer): void {
    const body = message.body;
    if (body !== null) {
      writer.uint32(10);
      writer.fork();
      TxBody.encode(body, writer);
      writer.ldelim();
    }

    const authInfo = message.authInfo;
    if (authInfo !== null) {
      writer.uint32(18);
      writer.fork();
      AuthInfo.encode(authInfo, writer);
      writer.ldelim();
    }

    const signatures = message.signatures;
    if (signatures.length !== 0) {
      for (let i: i32 = 0; i < signatures.length; ++i) {
        writer.uint32(26);
        writer.bytes(signatures[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): Tx {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Tx();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.body = TxBody.decode(reader, reader.uint32());
          break;

        case 2:
          message.authInfo = AuthInfo.decode(reader, reader.uint32());
          break;

        case 3:
          message.signatures.push(reader.bytes());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  body: TxBody | null;
  authInfo: AuthInfo | null;
  signatures: Array<Uint8Array>;

  constructor(
    body: TxBody | null = null,
    authInfo: AuthInfo | null = null,
    signatures: Array<Uint8Array> = []
  ) {
    this.body = body;
    this.authInfo = authInfo;
    this.signatures = signatures;
  }
}
