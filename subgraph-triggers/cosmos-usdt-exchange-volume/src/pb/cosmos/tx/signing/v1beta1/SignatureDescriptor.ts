// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../../google/protobuf/Any";
import { Data } from "./SignatureDescriptor/Data";

export class SignatureDescriptor {
  static encode(message: SignatureDescriptor, writer: Writer): void {
    const publicKey = message.publicKey;
    if (publicKey !== null) {
      writer.uint32(10);
      writer.fork();
      Any.encode(publicKey, writer);
      writer.ldelim();
    }

    const data = message.data;
    if (data !== null) {
      writer.uint32(18);
      writer.fork();
      Data.encode(data, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.uint64(message.sequence);
  }

  static decode(reader: Reader, length: i32): SignatureDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SignatureDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.publicKey = Any.decode(reader, reader.uint32());
          break;

        case 2:
          message.data = Data.decode(reader, reader.uint32());
          break;

        case 3:
          message.sequence = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  publicKey: Any | null;
  data: Data | null;
  sequence: u64;

  constructor(
    publicKey: Any | null = null,
    data: Data | null = null,
    sequence: u64 = 0
  ) {
    this.publicKey = publicKey;
    this.data = data;
    this.sequence = sequence;
  }
}
