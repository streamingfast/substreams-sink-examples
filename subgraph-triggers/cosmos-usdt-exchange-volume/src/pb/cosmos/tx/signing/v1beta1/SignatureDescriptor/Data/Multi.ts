// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { CompactBitArray } from "../../../../../crypto/multisig/v1beta1/CompactBitArray";
import { Data } from "../Data";

export class Multi {
  static encode(message: Multi, writer: Writer): void {
    const bitarray = message.bitarray;
    if (bitarray !== null) {
      writer.uint32(10);
      writer.fork();
      CompactBitArray.encode(bitarray, writer);
      writer.ldelim();
    }

    const signatures = message.signatures;
    for (let i: i32 = 0; i < signatures.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Data.encode(signatures[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Multi {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Multi();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bitarray = CompactBitArray.decode(reader, reader.uint32());
          break;

        case 2:
          message.signatures.push(Data.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  bitarray: CompactBitArray | null;
  signatures: Array<Data>;

  constructor(
    bitarray: CompactBitArray | null = null,
    signatures: Array<Data> = []
  ) {
    this.bitarray = bitarray;
    this.signatures = signatures;
  }
}
