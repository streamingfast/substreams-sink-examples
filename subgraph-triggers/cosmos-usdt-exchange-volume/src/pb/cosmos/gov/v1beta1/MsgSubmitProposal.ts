// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../google/protobuf/Any";
import { Coin } from "../../base/v1beta1/Coin";

export class MsgSubmitProposal {
  static encode(message: MsgSubmitProposal, writer: Writer): void {
    const content = message.content;
    if (content !== null) {
      writer.uint32(10);
      writer.fork();
      Any.encode(content, writer);
      writer.ldelim();
    }

    const initialDeposit = message.initialDeposit;
    for (let i: i32 = 0; i < initialDeposit.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Coin.encode(initialDeposit[i], writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.proposer);
  }

  static decode(reader: Reader, length: i32): MsgSubmitProposal {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSubmitProposal();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.content = Any.decode(reader, reader.uint32());
          break;

        case 2:
          message.initialDeposit.push(Coin.decode(reader, reader.uint32()));
          break;

        case 3:
          message.proposer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  content: Any | null;
  initialDeposit: Array<Coin>;
  proposer: string;

  constructor(
    content: Any | null = null,
    initialDeposit: Array<Coin> = [],
    proposer: string = ""
  ) {
    this.content = content;
    this.initialDeposit = initialDeposit;
    this.proposer = proposer;
  }
}
