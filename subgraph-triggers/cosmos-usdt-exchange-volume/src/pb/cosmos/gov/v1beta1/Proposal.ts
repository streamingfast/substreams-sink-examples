// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../google/protobuf/Any";
import { TallyResult } from "./TallyResult";
import { Timestamp } from "../../../google/protobuf/Timestamp";
import { Coin } from "../../base/v1beta1/Coin";
import { ProposalStatus } from "./ProposalStatus";

export class Proposal {
  static encode(message: Proposal, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.proposalId);

    const content = message.content;
    if (content !== null) {
      writer.uint32(18);
      writer.fork();
      Any.encode(content, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int32(message.status);

    const finalTallyResult = message.finalTallyResult;
    if (finalTallyResult !== null) {
      writer.uint32(34);
      writer.fork();
      TallyResult.encode(finalTallyResult, writer);
      writer.ldelim();
    }

    const submitTime = message.submitTime;
    if (submitTime !== null) {
      writer.uint32(42);
      writer.fork();
      Timestamp.encode(submitTime, writer);
      writer.ldelim();
    }

    const depositEndTime = message.depositEndTime;
    if (depositEndTime !== null) {
      writer.uint32(50);
      writer.fork();
      Timestamp.encode(depositEndTime, writer);
      writer.ldelim();
    }

    const totalDeposit = message.totalDeposit;
    for (let i: i32 = 0; i < totalDeposit.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Coin.encode(totalDeposit[i], writer);
      writer.ldelim();
    }

    const votingStartTime = message.votingStartTime;
    if (votingStartTime !== null) {
      writer.uint32(66);
      writer.fork();
      Timestamp.encode(votingStartTime, writer);
      writer.ldelim();
    }

    const votingEndTime = message.votingEndTime;
    if (votingEndTime !== null) {
      writer.uint32(74);
      writer.fork();
      Timestamp.encode(votingEndTime, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Proposal {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Proposal();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.proposalId = reader.uint64();
          break;

        case 2:
          message.content = Any.decode(reader, reader.uint32());
          break;

        case 3:
          message.status = reader.int32();
          break;

        case 4:
          message.finalTallyResult = TallyResult.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.submitTime = Timestamp.decode(reader, reader.uint32());
          break;

        case 6:
          message.depositEndTime = Timestamp.decode(reader, reader.uint32());
          break;

        case 7:
          message.totalDeposit.push(Coin.decode(reader, reader.uint32()));
          break;

        case 8:
          message.votingStartTime = Timestamp.decode(reader, reader.uint32());
          break;

        case 9:
          message.votingEndTime = Timestamp.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  proposalId: u64;
  content: Any | null;
  status: ProposalStatus;
  finalTallyResult: TallyResult | null;
  submitTime: Timestamp | null;
  depositEndTime: Timestamp | null;
  totalDeposit: Array<Coin>;
  votingStartTime: Timestamp | null;
  votingEndTime: Timestamp | null;

  constructor(
    proposalId: u64 = 0,
    content: Any | null = null,
    status: ProposalStatus = 0,
    finalTallyResult: TallyResult | null = null,
    submitTime: Timestamp | null = null,
    depositEndTime: Timestamp | null = null,
    totalDeposit: Array<Coin> = [],
    votingStartTime: Timestamp | null = null,
    votingEndTime: Timestamp | null = null
  ) {
    this.proposalId = proposalId;
    this.content = content;
    this.status = status;
    this.finalTallyResult = finalTallyResult;
    this.submitTime = submitTime;
    this.depositEndTime = depositEndTime;
    this.totalDeposit = totalDeposit;
    this.votingStartTime = votingStartTime;
    this.votingEndTime = votingEndTime;
  }
}
