// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { VoteOption } from "./VoteOption";

export class MsgVote {
  static encode(message: MsgVote, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.proposalId);

    writer.uint32(18);
    writer.string(message.voter);

    writer.uint32(24);
    writer.int32(message.option);
  }

  static decode(reader: Reader, length: i32): MsgVote {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgVote();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.proposalId = reader.uint64();
          break;

        case 2:
          message.voter = reader.string();
          break;

        case 3:
          message.option = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  proposalId: u64;
  voter: string;
  option: VoteOption;

  constructor(proposalId: u64 = 0, voter: string = "", option: VoteOption = 0) {
    this.proposalId = proposalId;
    this.voter = voter;
    this.option = option;
  }
}
