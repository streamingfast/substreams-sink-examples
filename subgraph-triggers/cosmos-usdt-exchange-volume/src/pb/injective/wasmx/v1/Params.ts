// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Params {
  static encode(message: Params, writer: Writer): void {
    writer.uint32(8);
    writer.bool(message.isExecutionEnabled);

    writer.uint32(16);
    writer.uint64(message.maxBeginBlockTotalGas);

    writer.uint32(24);
    writer.uint64(message.maxContractGasLimit);

    writer.uint32(32);
    writer.uint64(message.minGasPrice);
  }

  static decode(reader: Reader, length: i32): Params {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Params();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.isExecutionEnabled = reader.bool();
          break;

        case 2:
          message.maxBeginBlockTotalGas = reader.uint64();
          break;

        case 3:
          message.maxContractGasLimit = reader.uint64();
          break;

        case 4:
          message.minGasPrice = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  isExecutionEnabled: bool;
  maxBeginBlockTotalGas: u64;
  maxContractGasLimit: u64;
  minGasPrice: u64;

  constructor(
    isExecutionEnabled: bool = false,
    maxBeginBlockTotalGas: u64 = 0,
    maxContractGasLimit: u64 = 0,
    minGasPrice: u64 = 0
  ) {
    this.isExecutionEnabled = isExecutionEnabled;
    this.maxBeginBlockTotalGas = maxBeginBlockTotalGas;
    this.maxContractGasLimit = maxContractGasLimit;
    this.minGasPrice = minGasPrice;
  }
}
