// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class MsgUpdateContract {
  static encode(message: MsgUpdateContract, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.contractAddress);

    writer.uint32(24);
    writer.uint64(message.gasLimit);

    writer.uint32(32);
    writer.uint64(message.gasPrice);

    writer.uint32(42);
    writer.string(message.adminAddress);
  }

  static decode(reader: Reader, length: i32): MsgUpdateContract {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgUpdateContract();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.contractAddress = reader.string();
          break;

        case 3:
          message.gasLimit = reader.uint64();
          break;

        case 4:
          message.gasPrice = reader.uint64();
          break;

        case 5:
          message.adminAddress = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  contractAddress: string;
  gasLimit: u64;
  gasPrice: u64;
  adminAddress: string;

  constructor(
    sender: string = "",
    contractAddress: string = "",
    gasLimit: u64 = 0,
    gasPrice: u64 = 0,
    adminAddress: string = ""
  ) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.gasLimit = gasLimit;
    this.gasPrice = gasPrice;
    this.adminAddress = adminAddress;
  }
}
