// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { ContractRegistrationRequest } from "./ContractRegistrationRequest";

export class ContractRegistrationRequestProposal {
  static encode(
    message: ContractRegistrationRequestProposal,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.title);

    writer.uint32(18);
    writer.string(message.description);

    const contractRegistrationRequest = message.contractRegistrationRequest;
    if (contractRegistrationRequest !== null) {
      writer.uint32(26);
      writer.fork();
      ContractRegistrationRequest.encode(contractRegistrationRequest, writer);
      writer.ldelim();
    }
  }

  static decode(
    reader: Reader,
    length: i32
  ): ContractRegistrationRequestProposal {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ContractRegistrationRequestProposal();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.title = reader.string();
          break;

        case 2:
          message.description = reader.string();
          break;

        case 3:
          message.contractRegistrationRequest =
            ContractRegistrationRequest.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  title: string;
  description: string;
  contractRegistrationRequest: ContractRegistrationRequest | null;

  constructor(
    title: string = "",
    description: string = "",
    contractRegistrationRequest: ContractRegistrationRequest | null = null
  ) {
    this.title = title;
    this.description = description;
    this.contractRegistrationRequest = contractRegistrationRequest;
  }
}
