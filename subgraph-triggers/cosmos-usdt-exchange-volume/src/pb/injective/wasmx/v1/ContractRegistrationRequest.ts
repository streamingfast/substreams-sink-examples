// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { FundingMode } from "./FundingMode";

export class ContractRegistrationRequest {
  static encode(message: ContractRegistrationRequest, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.contractAddress);

    writer.uint32(16);
    writer.uint64(message.gasLimit);

    writer.uint32(24);
    writer.uint64(message.gasPrice);

    writer.uint32(32);
    writer.bool(message.shouldPinContract);

    writer.uint32(40);
    writer.bool(message.isMigrationAllowed);

    writer.uint32(48);
    writer.uint64(message.codeId);

    writer.uint32(58);
    writer.string(message.adminAddress);

    writer.uint32(66);
    writer.string(message.granterAddress);

    writer.uint32(72);
    writer.int32(message.fundingMode);
  }

  static decode(reader: Reader, length: i32): ContractRegistrationRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ContractRegistrationRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.contractAddress = reader.string();
          break;

        case 2:
          message.gasLimit = reader.uint64();
          break;

        case 3:
          message.gasPrice = reader.uint64();
          break;

        case 4:
          message.shouldPinContract = reader.bool();
          break;

        case 5:
          message.isMigrationAllowed = reader.bool();
          break;

        case 6:
          message.codeId = reader.uint64();
          break;

        case 7:
          message.adminAddress = reader.string();
          break;

        case 8:
          message.granterAddress = reader.string();
          break;

        case 9:
          message.fundingMode = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  contractAddress: string;
  gasLimit: u64;
  gasPrice: u64;
  shouldPinContract: bool;
  isMigrationAllowed: bool;
  codeId: u64;
  adminAddress: string;
  granterAddress: string;
  fundingMode: FundingMode;

  constructor(
    contractAddress: string = "",
    gasLimit: u64 = 0,
    gasPrice: u64 = 0,
    shouldPinContract: bool = false,
    isMigrationAllowed: bool = false,
    codeId: u64 = 0,
    adminAddress: string = "",
    granterAddress: string = "",
    fundingMode: FundingMode = 0
  ) {
    this.contractAddress = contractAddress;
    this.gasLimit = gasLimit;
    this.gasPrice = gasPrice;
    this.shouldPinContract = shouldPinContract;
    this.isMigrationAllowed = isMigrationAllowed;
    this.codeId = codeId;
    this.adminAddress = adminAddress;
    this.granterAddress = granterAddress;
    this.fundingMode = fundingMode;
  }
}
