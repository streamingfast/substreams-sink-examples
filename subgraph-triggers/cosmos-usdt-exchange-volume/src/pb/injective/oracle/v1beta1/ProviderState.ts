// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { ProviderInfo } from "./ProviderInfo";
import { ProviderPriceState } from "./ProviderPriceState";

export class ProviderState {
  static encode(message: ProviderState, writer: Writer): void {
    const providerInfo = message.providerInfo;
    if (providerInfo !== null) {
      writer.uint32(10);
      writer.fork();
      ProviderInfo.encode(providerInfo, writer);
      writer.ldelim();
    }

    const providerPriceStates = message.providerPriceStates;
    for (let i: i32 = 0; i < providerPriceStates.length; ++i) {
      writer.uint32(18);
      writer.fork();
      ProviderPriceState.encode(providerPriceStates[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ProviderState {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ProviderState();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.providerInfo = ProviderInfo.decode(reader, reader.uint32());
          break;

        case 2:
          message.providerPriceStates.push(
            ProviderPriceState.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  providerInfo: ProviderInfo | null;
  providerPriceStates: Array<ProviderPriceState>;

  constructor(
    providerInfo: ProviderInfo | null = null,
    providerPriceStates: Array<ProviderPriceState> = []
  ) {
    this.providerInfo = providerInfo;
    this.providerPriceStates = providerPriceStates;
  }
}
