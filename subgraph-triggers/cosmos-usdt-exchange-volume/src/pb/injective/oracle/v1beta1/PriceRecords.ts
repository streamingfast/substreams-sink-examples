// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { PriceRecord } from "./PriceRecord";
import { OracleType } from "./OracleType";

export class PriceRecords {
  static encode(message: PriceRecords, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.oracle);

    writer.uint32(18);
    writer.string(message.symbolId);

    const latestPriceRecords = message.latestPriceRecords;
    for (let i: i32 = 0; i < latestPriceRecords.length; ++i) {
      writer.uint32(26);
      writer.fork();
      PriceRecord.encode(latestPriceRecords[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): PriceRecords {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PriceRecords();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.oracle = reader.int32();
          break;

        case 2:
          message.symbolId = reader.string();
          break;

        case 3:
          message.latestPriceRecords.push(
            PriceRecord.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  oracle: OracleType;
  symbolId: string;
  latestPriceRecords: Array<PriceRecord>;

  constructor(
    oracle: OracleType = 0,
    symbolId: string = "",
    latestPriceRecords: Array<PriceRecord> = []
  ) {
    this.oracle = oracle;
    this.symbolId = symbolId;
    this.latestPriceRecords = latestPriceRecords;
  }
}
