// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class BandOracleRequest {
  static encode(message: BandOracleRequest, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.requestId);

    writer.uint32(16);
    writer.int64(message.oracleScriptId);

    const symbols = message.symbols;
    if (symbols.length !== 0) {
      for (let i: i32 = 0; i < symbols.length; ++i) {
        writer.uint32(26);
        writer.string(symbols[i]);
      }
    }

    writer.uint32(32);
    writer.uint64(message.askCount);

    writer.uint32(40);
    writer.uint64(message.minCount);

    const feeLimit = message.feeLimit;
    for (let i: i32 = 0; i < feeLimit.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Coin.encode(feeLimit[i], writer);
      writer.ldelim();
    }

    writer.uint32(56);
    writer.uint64(message.prepareGas);

    writer.uint32(64);
    writer.uint64(message.executeGas);

    writer.uint32(72);
    writer.uint64(message.minSourceCount);
  }

  static decode(reader: Reader, length: i32): BandOracleRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BandOracleRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.requestId = reader.uint64();
          break;

        case 2:
          message.oracleScriptId = reader.int64();
          break;

        case 3:
          message.symbols.push(reader.string());
          break;

        case 4:
          message.askCount = reader.uint64();
          break;

        case 5:
          message.minCount = reader.uint64();
          break;

        case 6:
          message.feeLimit.push(Coin.decode(reader, reader.uint32()));
          break;

        case 7:
          message.prepareGas = reader.uint64();
          break;

        case 8:
          message.executeGas = reader.uint64();
          break;

        case 9:
          message.minSourceCount = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  requestId: u64;
  oracleScriptId: i64;
  symbols: Array<string>;
  askCount: u64;
  minCount: u64;
  feeLimit: Array<Coin>;
  prepareGas: u64;
  executeGas: u64;
  minSourceCount: u64;

  constructor(
    requestId: u64 = 0,
    oracleScriptId: i64 = 0,
    symbols: Array<string> = [],
    askCount: u64 = 0,
    minCount: u64 = 0,
    feeLimit: Array<Coin> = [],
    prepareGas: u64 = 0,
    executeGas: u64 = 0,
    minSourceCount: u64 = 0
  ) {
    this.requestId = requestId;
    this.oracleScriptId = oracleScriptId;
    this.symbols = symbols;
    this.askCount = askCount;
    this.minCount = minCount;
    this.feeLimit = feeLimit;
    this.prepareGas = prepareGas;
    this.executeGas = executeGas;
    this.minSourceCount = minSourceCount;
  }
}
