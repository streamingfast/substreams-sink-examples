// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class MetadataStatistics {
  static encode(message: MetadataStatistics, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.groupCount);

    writer.uint32(16);
    writer.uint32(message.recordsSampleSize);

    writer.uint32(26);
    writer.string(message.mean);

    writer.uint32(34);
    writer.string(message.twap);

    writer.uint32(40);
    writer.int64(message.firstTimestamp);

    writer.uint32(48);
    writer.int64(message.lastTimestamp);

    writer.uint32(58);
    writer.string(message.minPrice);

    writer.uint32(66);
    writer.string(message.maxPrice);

    writer.uint32(74);
    writer.string(message.medianPrice);
  }

  static decode(reader: Reader, length: i32): MetadataStatistics {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MetadataStatistics();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.groupCount = reader.uint32();
          break;

        case 2:
          message.recordsSampleSize = reader.uint32();
          break;

        case 3:
          message.mean = reader.string();
          break;

        case 4:
          message.twap = reader.string();
          break;

        case 5:
          message.firstTimestamp = reader.int64();
          break;

        case 6:
          message.lastTimestamp = reader.int64();
          break;

        case 7:
          message.minPrice = reader.string();
          break;

        case 8:
          message.maxPrice = reader.string();
          break;

        case 9:
          message.medianPrice = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  groupCount: u32;
  recordsSampleSize: u32;
  mean: string;
  twap: string;
  firstTimestamp: i64;
  lastTimestamp: i64;
  minPrice: string;
  maxPrice: string;
  medianPrice: string;

  constructor(
    groupCount: u32 = 0,
    recordsSampleSize: u32 = 0,
    mean: string = "",
    twap: string = "",
    firstTimestamp: i64 = 0,
    lastTimestamp: i64 = 0,
    minPrice: string = "",
    maxPrice: string = "",
    medianPrice: string = ""
  ) {
    this.groupCount = groupCount;
    this.recordsSampleSize = recordsSampleSize;
    this.mean = mean;
    this.twap = twap;
    this.firstTimestamp = firstTimestamp;
    this.lastTimestamp = lastTimestamp;
    this.minPrice = minPrice;
    this.maxPrice = maxPrice;
    this.medianPrice = medianPrice;
  }
}
