// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { PriceState } from "./PriceState";

export class BandPriceState {
  static encode(message: BandPriceState, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.symbol);

    writer.uint32(18);
    writer.string(message.rate);

    writer.uint32(24);
    writer.uint64(message.resolveTime);

    writer.uint32(32);
    writer.uint64(message.requestID);

    const priceState = message.priceState;
    if (priceState !== null) {
      writer.uint32(42);
      writer.fork();
      PriceState.encode(priceState, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): BandPriceState {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BandPriceState();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.symbol = reader.string();
          break;

        case 2:
          message.rate = reader.string();
          break;

        case 3:
          message.resolveTime = reader.uint64();
          break;

        case 4:
          message.requestID = reader.uint64();
          break;

        case 5:
          message.priceState = PriceState.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  symbol: string;
  rate: string;
  resolveTime: u64;
  requestID: u64;
  priceState: PriceState | null;

  constructor(
    symbol: string = "",
    rate: string = "",
    resolveTime: u64 = 0,
    requestID: u64 = 0,
    priceState: PriceState | null = null
  ) {
    this.symbol = symbol;
    this.rate = rate;
    this.resolveTime = resolveTime;
    this.requestID = requestID;
    this.priceState = priceState;
  }
}
