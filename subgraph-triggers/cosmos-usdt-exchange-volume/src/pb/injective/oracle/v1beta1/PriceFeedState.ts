// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { PriceState } from "./PriceState";

export class PriceFeedState {
  static encode(message: PriceFeedState, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.base);

    writer.uint32(18);
    writer.string(message.quote);

    const priceState = message.priceState;
    if (priceState !== null) {
      writer.uint32(26);
      writer.fork();
      PriceState.encode(priceState, writer);
      writer.ldelim();
    }

    const relayers = message.relayers;
    if (relayers.length !== 0) {
      for (let i: i32 = 0; i < relayers.length; ++i) {
        writer.uint32(34);
        writer.string(relayers[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): PriceFeedState {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PriceFeedState();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.base = reader.string();
          break;

        case 2:
          message.quote = reader.string();
          break;

        case 3:
          message.priceState = PriceState.decode(reader, reader.uint32());
          break;

        case 4:
          message.relayers.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  base: string;
  quote: string;
  priceState: PriceState | null;
  relayers: Array<string>;

  constructor(
    base: string = "",
    quote: string = "",
    priceState: PriceState | null = null,
    relayers: Array<string> = []
  ) {
    this.base = base;
    this.quote = quote;
    this.priceState = priceState;
    this.relayers = relayers;
  }
}
