// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class EventAuctionStart {
  static encode(message: EventAuctionStart, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.round);

    writer.uint32(16);
    writer.int64(message.endingTimestamp);

    const newBasket = message.newBasket;
    for (let i: i32 = 0; i < newBasket.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Coin.encode(newBasket[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): EventAuctionStart {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EventAuctionStart();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.round = reader.uint64();
          break;

        case 2:
          message.endingTimestamp = reader.int64();
          break;

        case 3:
          message.newBasket.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  round: u64;
  endingTimestamp: i64;
  newBasket: Array<Coin>;

  constructor(
    round: u64 = 0,
    endingTimestamp: i64 = 0,
    newBasket: Array<Coin> = []
  ) {
    this.round = round;
    this.endingTimestamp = endingTimestamp;
    this.newBasket = newBasket;
  }
}
