// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class MsgERC20DeployedClaim {
  static encode(message: MsgERC20DeployedClaim, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.eventNonce);

    writer.uint32(16);
    writer.uint64(message.blockHeight);

    writer.uint32(26);
    writer.string(message.cosmosDenom);

    writer.uint32(34);
    writer.string(message.tokenContract);

    writer.uint32(42);
    writer.string(message.name);

    writer.uint32(50);
    writer.string(message.symbol);

    writer.uint32(56);
    writer.uint64(message.decimals);

    writer.uint32(66);
    writer.string(message.orchestrator);
  }

  static decode(reader: Reader, length: i32): MsgERC20DeployedClaim {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgERC20DeployedClaim();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = reader.uint64();
          break;

        case 2:
          message.blockHeight = reader.uint64();
          break;

        case 3:
          message.cosmosDenom = reader.string();
          break;

        case 4:
          message.tokenContract = reader.string();
          break;

        case 5:
          message.name = reader.string();
          break;

        case 6:
          message.symbol = reader.string();
          break;

        case 7:
          message.decimals = reader.uint64();
          break;

        case 8:
          message.orchestrator = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  eventNonce: u64;
  blockHeight: u64;
  cosmosDenom: string;
  tokenContract: string;
  name: string;
  symbol: string;
  decimals: u64;
  orchestrator: string;

  constructor(
    eventNonce: u64 = 0,
    blockHeight: u64 = 0,
    cosmosDenom: string = "",
    tokenContract: string = "",
    name: string = "",
    symbol: string = "",
    decimals: u64 = 0,
    orchestrator: string = ""
  ) {
    this.eventNonce = eventNonce;
    this.blockHeight = blockHeight;
    this.cosmosDenom = cosmosDenom;
    this.tokenContract = tokenContract;
    this.name = name;
    this.symbol = symbol;
    this.decimals = decimals;
    this.orchestrator = orchestrator;
  }
}
