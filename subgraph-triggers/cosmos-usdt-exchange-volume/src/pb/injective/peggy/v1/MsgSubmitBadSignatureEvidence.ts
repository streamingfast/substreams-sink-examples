// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../google/protobuf/Any";

export class MsgSubmitBadSignatureEvidence {
  static encode(message: MsgSubmitBadSignatureEvidence, writer: Writer): void {
    const subject = message.subject;
    if (subject !== null) {
      writer.uint32(10);
      writer.fork();
      Any.encode(subject, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.signature);

    writer.uint32(26);
    writer.string(message.sender);
  }

  static decode(reader: Reader, length: i32): MsgSubmitBadSignatureEvidence {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSubmitBadSignatureEvidence();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.subject = Any.decode(reader, reader.uint32());
          break;

        case 2:
          message.signature = reader.string();
          break;

        case 3:
          message.sender = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  subject: Any | null;
  signature: string;
  sender: string;

  constructor(
    subject: Any | null = null,
    signature: string = "",
    sender: string = ""
  ) {
    this.subject = subject;
    this.signature = signature;
    this.sender = sender;
  }
}
