// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class MsgDepositClaim {
  static encode(message: MsgDepositClaim, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.eventNonce);

    writer.uint32(16);
    writer.uint64(message.blockHeight);

    writer.uint32(26);
    writer.string(message.tokenContract);

    writer.uint32(34);
    writer.string(message.amount);

    writer.uint32(42);
    writer.string(message.ethereumSender);

    writer.uint32(50);
    writer.string(message.cosmosReceiver);

    writer.uint32(58);
    writer.string(message.orchestrator);

    writer.uint32(66);
    writer.string(message.data);
  }

  static decode(reader: Reader, length: i32): MsgDepositClaim {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgDepositClaim();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = reader.uint64();
          break;

        case 2:
          message.blockHeight = reader.uint64();
          break;

        case 3:
          message.tokenContract = reader.string();
          break;

        case 4:
          message.amount = reader.string();
          break;

        case 5:
          message.ethereumSender = reader.string();
          break;

        case 6:
          message.cosmosReceiver = reader.string();
          break;

        case 7:
          message.orchestrator = reader.string();
          break;

        case 8:
          message.data = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  eventNonce: u64;
  blockHeight: u64;
  tokenContract: string;
  amount: string;
  ethereumSender: string;
  cosmosReceiver: string;
  orchestrator: string;
  data: string;

  constructor(
    eventNonce: u64 = 0,
    blockHeight: u64 = 0,
    tokenContract: string = "",
    amount: string = "",
    ethereumSender: string = "",
    cosmosReceiver: string = "",
    orchestrator: string = "",
    data: string = ""
  ) {
    this.eventNonce = eventNonce;
    this.blockHeight = blockHeight;
    this.tokenContract = tokenContract;
    this.amount = amount;
    this.ethereumSender = ethereumSender;
    this.cosmosReceiver = cosmosReceiver;
    this.orchestrator = orchestrator;
    this.data = data;
  }
}
