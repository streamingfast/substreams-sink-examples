// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { BridgeValidator } from "./BridgeValidator";

export class MsgValsetUpdatedClaim {
  static encode(message: MsgValsetUpdatedClaim, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.eventNonce);

    writer.uint32(16);
    writer.uint64(message.valsetNonce);

    writer.uint32(24);
    writer.uint64(message.blockHeight);

    const members = message.members;
    for (let i: i32 = 0; i < members.length; ++i) {
      writer.uint32(34);
      writer.fork();
      BridgeValidator.encode(members[i], writer);
      writer.ldelim();
    }

    writer.uint32(42);
    writer.string(message.rewardAmount);

    writer.uint32(50);
    writer.string(message.rewardToken);

    writer.uint32(58);
    writer.string(message.orchestrator);
  }

  static decode(reader: Reader, length: i32): MsgValsetUpdatedClaim {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgValsetUpdatedClaim();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.eventNonce = reader.uint64();
          break;

        case 2:
          message.valsetNonce = reader.uint64();
          break;

        case 3:
          message.blockHeight = reader.uint64();
          break;

        case 4:
          message.members.push(BridgeValidator.decode(reader, reader.uint32()));
          break;

        case 5:
          message.rewardAmount = reader.string();
          break;

        case 6:
          message.rewardToken = reader.string();
          break;

        case 7:
          message.orchestrator = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  eventNonce: u64;
  valsetNonce: u64;
  blockHeight: u64;
  members: Array<BridgeValidator>;
  rewardAmount: string;
  rewardToken: string;
  orchestrator: string;

  constructor(
    eventNonce: u64 = 0,
    valsetNonce: u64 = 0,
    blockHeight: u64 = 0,
    members: Array<BridgeValidator> = [],
    rewardAmount: string = "",
    rewardToken: string = "",
    orchestrator: string = ""
  ) {
    this.eventNonce = eventNonce;
    this.valsetNonce = valsetNonce;
    this.blockHeight = blockHeight;
    this.members = members;
    this.rewardAmount = rewardAmount;
    this.rewardToken = rewardToken;
    this.orchestrator = orchestrator;
  }
}
