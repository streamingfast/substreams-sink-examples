// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class MsgSendToEth {
  static encode(message: MsgSendToEth, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.ethDest);

    const amount = message.amount;
    if (amount !== null) {
      writer.uint32(26);
      writer.fork();
      Coin.encode(amount, writer);
      writer.ldelim();
    }

    const bridgeFee = message.bridgeFee;
    if (bridgeFee !== null) {
      writer.uint32(34);
      writer.fork();
      Coin.encode(bridgeFee, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgSendToEth {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSendToEth();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.ethDest = reader.string();
          break;

        case 3:
          message.amount = Coin.decode(reader, reader.uint32());
          break;

        case 4:
          message.bridgeFee = Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  ethDest: string;
  amount: Coin | null;
  bridgeFee: Coin | null;

  constructor(
    sender: string = "",
    ethDest: string = "",
    amount: Coin | null = null,
    bridgeFee: Coin | null = null
  ) {
    this.sender = sender;
    this.ethDest = ethDest;
    this.amount = amount;
    this.bridgeFee = bridgeFee;
  }
}
