// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { BridgeValidator } from "./BridgeValidator";

export class Valset {
  static encode(message: Valset, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.nonce);

    const members = message.members;
    for (let i: i32 = 0; i < members.length; ++i) {
      writer.uint32(18);
      writer.fork();
      BridgeValidator.encode(members[i], writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.uint64(message.height);

    writer.uint32(34);
    writer.string(message.rewardAmount);

    writer.uint32(42);
    writer.string(message.rewardToken);
  }

  static decode(reader: Reader, length: i32): Valset {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Valset();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.nonce = reader.uint64();
          break;

        case 2:
          message.members.push(BridgeValidator.decode(reader, reader.uint32()));
          break;

        case 3:
          message.height = reader.uint64();
          break;

        case 4:
          message.rewardAmount = reader.string();
          break;

        case 5:
          message.rewardToken = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  nonce: u64;
  members: Array<BridgeValidator>;
  height: u64;
  rewardAmount: string;
  rewardToken: string;

  constructor(
    nonce: u64 = 0,
    members: Array<BridgeValidator> = [],
    height: u64 = 0,
    rewardAmount: string = "",
    rewardToken: string = ""
  ) {
    this.nonce = nonce;
    this.members = members;
    this.height = height;
    this.rewardAmount = rewardAmount;
    this.rewardToken = rewardToken;
  }
}
