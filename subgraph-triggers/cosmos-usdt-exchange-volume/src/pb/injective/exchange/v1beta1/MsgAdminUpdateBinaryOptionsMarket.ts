// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { MarketStatus } from "./MarketStatus";

export class MsgAdminUpdateBinaryOptionsMarket {
  static encode(
    message: MsgAdminUpdateBinaryOptionsMarket,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.marketId);

    writer.uint32(26);
    writer.string(message.settlementPrice);

    writer.uint32(32);
    writer.int64(message.expirationTimestamp);

    writer.uint32(40);
    writer.int64(message.settlementTimestamp);

    writer.uint32(48);
    writer.int32(message.status);
  }

  static decode(
    reader: Reader,
    length: i32
  ): MsgAdminUpdateBinaryOptionsMarket {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgAdminUpdateBinaryOptionsMarket();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.marketId = reader.string();
          break;

        case 3:
          message.settlementPrice = reader.string();
          break;

        case 4:
          message.expirationTimestamp = reader.int64();
          break;

        case 5:
          message.settlementTimestamp = reader.int64();
          break;

        case 6:
          message.status = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  marketId: string;
  settlementPrice: string;
  expirationTimestamp: i64;
  settlementTimestamp: i64;
  status: MarketStatus;

  constructor(
    sender: string = "",
    marketId: string = "",
    settlementPrice: string = "",
    expirationTimestamp: i64 = 0,
    settlementTimestamp: i64 = 0,
    status: MarketStatus = 0
  ) {
    this.sender = sender;
    this.marketId = marketId;
    this.settlementPrice = settlementPrice;
    this.expirationTimestamp = expirationTimestamp;
    this.settlementTimestamp = settlementTimestamp;
    this.status = status;
  }
}
