// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { PointsMultiplier } from "./PointsMultiplier";

export class TradingRewardCampaignBoostInfo {
  static encode(message: TradingRewardCampaignBoostInfo, writer: Writer): void {
    const boostedSpotMarketIds = message.boostedSpotMarketIds;
    if (boostedSpotMarketIds.length !== 0) {
      for (let i: i32 = 0; i < boostedSpotMarketIds.length; ++i) {
        writer.uint32(10);
        writer.string(boostedSpotMarketIds[i]);
      }
    }

    const spotMarketMultipliers = message.spotMarketMultipliers;
    for (let i: i32 = 0; i < spotMarketMultipliers.length; ++i) {
      writer.uint32(18);
      writer.fork();
      PointsMultiplier.encode(spotMarketMultipliers[i], writer);
      writer.ldelim();
    }

    const boostedDerivativeMarketIds = message.boostedDerivativeMarketIds;
    if (boostedDerivativeMarketIds.length !== 0) {
      for (let i: i32 = 0; i < boostedDerivativeMarketIds.length; ++i) {
        writer.uint32(26);
        writer.string(boostedDerivativeMarketIds[i]);
      }
    }

    const derivativeMarketMultipliers = message.derivativeMarketMultipliers;
    for (let i: i32 = 0; i < derivativeMarketMultipliers.length; ++i) {
      writer.uint32(34);
      writer.fork();
      PointsMultiplier.encode(derivativeMarketMultipliers[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): TradingRewardCampaignBoostInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TradingRewardCampaignBoostInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.boostedSpotMarketIds.push(reader.string());
          break;

        case 2:
          message.spotMarketMultipliers.push(
            PointsMultiplier.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.boostedDerivativeMarketIds.push(reader.string());
          break;

        case 4:
          message.derivativeMarketMultipliers.push(
            PointsMultiplier.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  boostedSpotMarketIds: Array<string>;
  spotMarketMultipliers: Array<PointsMultiplier>;
  boostedDerivativeMarketIds: Array<string>;
  derivativeMarketMultipliers: Array<PointsMultiplier>;

  constructor(
    boostedSpotMarketIds: Array<string> = [],
    spotMarketMultipliers: Array<PointsMultiplier> = [],
    boostedDerivativeMarketIds: Array<string> = [],
    derivativeMarketMultipliers: Array<PointsMultiplier> = []
  ) {
    this.boostedSpotMarketIds = boostedSpotMarketIds;
    this.spotMarketMultipliers = spotMarketMultipliers;
    this.boostedDerivativeMarketIds = boostedDerivativeMarketIds;
    this.derivativeMarketMultipliers = derivativeMarketMultipliers;
  }
}
