// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class PerpetualMarketInfo {
  static encode(message: PerpetualMarketInfo, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.marketId);

    writer.uint32(18);
    writer.string(message.hourlyFundingRateCap);

    writer.uint32(26);
    writer.string(message.hourlyInterestRate);

    writer.uint32(32);
    writer.int64(message.nextFundingTimestamp);

    writer.uint32(40);
    writer.int64(message.fundingInterval);
  }

  static decode(reader: Reader, length: i32): PerpetualMarketInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PerpetualMarketInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketId = reader.string();
          break;

        case 2:
          message.hourlyFundingRateCap = reader.string();
          break;

        case 3:
          message.hourlyInterestRate = reader.string();
          break;

        case 4:
          message.nextFundingTimestamp = reader.int64();
          break;

        case 5:
          message.fundingInterval = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  marketId: string;
  hourlyFundingRateCap: string;
  hourlyInterestRate: string;
  nextFundingTimestamp: i64;
  fundingInterval: i64;

  constructor(
    marketId: string = "",
    hourlyFundingRateCap: string = "",
    hourlyInterestRate: string = "",
    nextFundingTimestamp: i64 = 0,
    fundingInterval: i64 = 0
  ) {
    this.marketId = marketId;
    this.hourlyFundingRateCap = hourlyFundingRateCap;
    this.hourlyInterestRate = hourlyInterestRate;
    this.nextFundingTimestamp = nextFundingTimestamp;
    this.fundingInterval = fundingInterval;
  }
}
