// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class MsgInstantSpotMarketLaunch {
  static encode(message: MsgInstantSpotMarketLaunch, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.ticker);

    writer.uint32(26);
    writer.string(message.baseDenom);

    writer.uint32(34);
    writer.string(message.quoteDenom);

    writer.uint32(42);
    writer.string(message.minPriceTickSize);

    writer.uint32(50);
    writer.string(message.minQuantityTickSize);
  }

  static decode(reader: Reader, length: i32): MsgInstantSpotMarketLaunch {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgInstantSpotMarketLaunch();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.ticker = reader.string();
          break;

        case 3:
          message.baseDenom = reader.string();
          break;

        case 4:
          message.quoteDenom = reader.string();
          break;

        case 5:
          message.minPriceTickSize = reader.string();
          break;

        case 6:
          message.minQuantityTickSize = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  ticker: string;
  baseDenom: string;
  quoteDenom: string;
  minPriceTickSize: string;
  minQuantityTickSize: string;

  constructor(
    sender: string = "",
    ticker: string = "",
    baseDenom: string = "",
    quoteDenom: string = "",
    minPriceTickSize: string = "",
    minQuantityTickSize: string = ""
  ) {
    this.sender = sender;
    this.ticker = ticker;
    this.baseDenom = baseDenom;
    this.quoteDenom = quoteDenom;
    this.minPriceTickSize = minPriceTickSize;
    this.minQuantityTickSize = minQuantityTickSize;
  }
}
