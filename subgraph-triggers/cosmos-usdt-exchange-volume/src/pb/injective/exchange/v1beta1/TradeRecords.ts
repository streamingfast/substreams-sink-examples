// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { TradeRecord } from "./TradeRecord";

export class TradeRecords {
  static encode(message: TradeRecords, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.marketId);

    const latestTradeRecords = message.latestTradeRecords;
    for (let i: i32 = 0; i < latestTradeRecords.length; ++i) {
      writer.uint32(18);
      writer.fork();
      TradeRecord.encode(latestTradeRecords[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): TradeRecords {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TradeRecords();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketId = reader.string();
          break;

        case 2:
          message.latestTradeRecords.push(
            TradeRecord.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  marketId: string;
  latestTradeRecords: Array<TradeRecord>;

  constructor(
    marketId: string = "",
    latestTradeRecords: Array<TradeRecord> = []
  ) {
    this.marketId = marketId;
    this.latestTradeRecords = latestTradeRecords;
  }
}
