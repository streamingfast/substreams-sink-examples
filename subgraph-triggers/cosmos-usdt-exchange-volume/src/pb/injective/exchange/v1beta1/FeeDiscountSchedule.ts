// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { FeeDiscountTierInfo } from "./FeeDiscountTierInfo";

export class FeeDiscountSchedule {
  static encode(message: FeeDiscountSchedule, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.bucketCount);

    writer.uint32(16);
    writer.int64(message.bucketDuration);

    const quoteDenoms = message.quoteDenoms;
    if (quoteDenoms.length !== 0) {
      for (let i: i32 = 0; i < quoteDenoms.length; ++i) {
        writer.uint32(26);
        writer.string(quoteDenoms[i]);
      }
    }

    const tierInfos = message.tierInfos;
    for (let i: i32 = 0; i < tierInfos.length; ++i) {
      writer.uint32(34);
      writer.fork();
      FeeDiscountTierInfo.encode(tierInfos[i], writer);
      writer.ldelim();
    }

    const disqualifiedMarketIds = message.disqualifiedMarketIds;
    if (disqualifiedMarketIds.length !== 0) {
      for (let i: i32 = 0; i < disqualifiedMarketIds.length; ++i) {
        writer.uint32(42);
        writer.string(disqualifiedMarketIds[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): FeeDiscountSchedule {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new FeeDiscountSchedule();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.bucketCount = reader.uint64();
          break;

        case 2:
          message.bucketDuration = reader.int64();
          break;

        case 3:
          message.quoteDenoms.push(reader.string());
          break;

        case 4:
          message.tierInfos.push(
            FeeDiscountTierInfo.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.disqualifiedMarketIds.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  bucketCount: u64;
  bucketDuration: i64;
  quoteDenoms: Array<string>;
  tierInfos: Array<FeeDiscountTierInfo>;
  disqualifiedMarketIds: Array<string>;

  constructor(
    bucketCount: u64 = 0,
    bucketDuration: i64 = 0,
    quoteDenoms: Array<string> = [],
    tierInfos: Array<FeeDiscountTierInfo> = [],
    disqualifiedMarketIds: Array<string> = []
  ) {
    this.bucketCount = bucketCount;
    this.bucketDuration = bucketDuration;
    this.quoteDenoms = quoteDenoms;
    this.tierInfos = tierInfos;
    this.disqualifiedMarketIds = disqualifiedMarketIds;
  }
}
