// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";
import { AtomicMarketOrderAccessLevel } from "./AtomicMarketOrderAccessLevel";

export class Params {
  static encode(message: Params, writer: Writer): void {
    const spotMarketInstantListingFee = message.spotMarketInstantListingFee;
    if (spotMarketInstantListingFee !== null) {
      writer.uint32(10);
      writer.fork();
      Coin.encode(spotMarketInstantListingFee, writer);
      writer.ldelim();
    }

    const derivativeMarketInstantListingFee =
      message.derivativeMarketInstantListingFee;
    if (derivativeMarketInstantListingFee !== null) {
      writer.uint32(18);
      writer.fork();
      Coin.encode(derivativeMarketInstantListingFee, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.defaultSpotMakerFeeRate);

    writer.uint32(34);
    writer.string(message.defaultSpotTakerFeeRate);

    writer.uint32(42);
    writer.string(message.defaultDerivativeMakerFeeRate);

    writer.uint32(50);
    writer.string(message.defaultDerivativeTakerFeeRate);

    writer.uint32(58);
    writer.string(message.defaultInitialMarginRatio);

    writer.uint32(66);
    writer.string(message.defaultMaintenanceMarginRatio);

    writer.uint32(72);
    writer.int64(message.defaultFundingInterval);

    writer.uint32(80);
    writer.int64(message.fundingMultiple);

    writer.uint32(90);
    writer.string(message.relayerFeeShareRate);

    writer.uint32(98);
    writer.string(message.defaultHourlyFundingRateCap);

    writer.uint32(106);
    writer.string(message.defaultHourlyInterestRate);

    writer.uint32(112);
    writer.uint32(message.maxDerivativeOrderSideCount);

    writer.uint32(122);
    writer.string(message.injRewardStakedRequirementThreshold);

    writer.uint32(128);
    writer.int64(message.tradingRewardsVestingDuration);

    writer.uint32(138);
    writer.string(message.liquidatorRewardShareRate);

    const binaryOptionsMarketInstantListingFee =
      message.binaryOptionsMarketInstantListingFee;
    if (binaryOptionsMarketInstantListingFee !== null) {
      writer.uint32(146);
      writer.fork();
      Coin.encode(binaryOptionsMarketInstantListingFee, writer);
      writer.ldelim();
    }

    writer.uint32(152);
    writer.int32(message.atomicMarketOrderAccessLevel);

    writer.uint32(162);
    writer.string(message.spotAtomicMarketOrderFeeMultiplier);

    writer.uint32(170);
    writer.string(message.derivativeAtomicMarketOrderFeeMultiplier);

    writer.uint32(178);
    writer.string(message.binaryOptionsAtomicMarketOrderFeeMultiplier);

    writer.uint32(186);
    writer.string(message.minimalProtocolFeeRate);

    writer.uint32(192);
    writer.bool(message.isInstantDerivativeMarketLaunchEnabled);

    writer.uint32(200);
    writer.int64(message.postOnlyModeHeightThreshold);
  }

  static decode(reader: Reader, length: i32): Params {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Params();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.spotMarketInstantListingFee = Coin.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.derivativeMarketInstantListingFee = Coin.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.defaultSpotMakerFeeRate = reader.string();
          break;

        case 4:
          message.defaultSpotTakerFeeRate = reader.string();
          break;

        case 5:
          message.defaultDerivativeMakerFeeRate = reader.string();
          break;

        case 6:
          message.defaultDerivativeTakerFeeRate = reader.string();
          break;

        case 7:
          message.defaultInitialMarginRatio = reader.string();
          break;

        case 8:
          message.defaultMaintenanceMarginRatio = reader.string();
          break;

        case 9:
          message.defaultFundingInterval = reader.int64();
          break;

        case 10:
          message.fundingMultiple = reader.int64();
          break;

        case 11:
          message.relayerFeeShareRate = reader.string();
          break;

        case 12:
          message.defaultHourlyFundingRateCap = reader.string();
          break;

        case 13:
          message.defaultHourlyInterestRate = reader.string();
          break;

        case 14:
          message.maxDerivativeOrderSideCount = reader.uint32();
          break;

        case 15:
          message.injRewardStakedRequirementThreshold = reader.string();
          break;

        case 16:
          message.tradingRewardsVestingDuration = reader.int64();
          break;

        case 17:
          message.liquidatorRewardShareRate = reader.string();
          break;

        case 18:
          message.binaryOptionsMarketInstantListingFee = Coin.decode(
            reader,
            reader.uint32()
          );
          break;

        case 19:
          message.atomicMarketOrderAccessLevel = reader.int32();
          break;

        case 20:
          message.spotAtomicMarketOrderFeeMultiplier = reader.string();
          break;

        case 21:
          message.derivativeAtomicMarketOrderFeeMultiplier = reader.string();
          break;

        case 22:
          message.binaryOptionsAtomicMarketOrderFeeMultiplier = reader.string();
          break;

        case 23:
          message.minimalProtocolFeeRate = reader.string();
          break;

        case 24:
          message.isInstantDerivativeMarketLaunchEnabled = reader.bool();
          break;

        case 25:
          message.postOnlyModeHeightThreshold = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  spotMarketInstantListingFee: Coin | null;
  derivativeMarketInstantListingFee: Coin | null;
  defaultSpotMakerFeeRate: string;
  defaultSpotTakerFeeRate: string;
  defaultDerivativeMakerFeeRate: string;
  defaultDerivativeTakerFeeRate: string;
  defaultInitialMarginRatio: string;
  defaultMaintenanceMarginRatio: string;
  defaultFundingInterval: i64;
  fundingMultiple: i64;
  relayerFeeShareRate: string;
  defaultHourlyFundingRateCap: string;
  defaultHourlyInterestRate: string;
  maxDerivativeOrderSideCount: u32;
  injRewardStakedRequirementThreshold: string;
  tradingRewardsVestingDuration: i64;
  liquidatorRewardShareRate: string;
  binaryOptionsMarketInstantListingFee: Coin | null;
  atomicMarketOrderAccessLevel: AtomicMarketOrderAccessLevel;
  spotAtomicMarketOrderFeeMultiplier: string;
  derivativeAtomicMarketOrderFeeMultiplier: string;
  binaryOptionsAtomicMarketOrderFeeMultiplier: string;
  minimalProtocolFeeRate: string;
  isInstantDerivativeMarketLaunchEnabled: bool;
  postOnlyModeHeightThreshold: i64;

  constructor(
    spotMarketInstantListingFee: Coin | null = null,
    derivativeMarketInstantListingFee: Coin | null = null,
    defaultSpotMakerFeeRate: string = "",
    defaultSpotTakerFeeRate: string = "",
    defaultDerivativeMakerFeeRate: string = "",
    defaultDerivativeTakerFeeRate: string = "",
    defaultInitialMarginRatio: string = "",
    defaultMaintenanceMarginRatio: string = "",
    defaultFundingInterval: i64 = 0,
    fundingMultiple: i64 = 0,
    relayerFeeShareRate: string = "",
    defaultHourlyFundingRateCap: string = "",
    defaultHourlyInterestRate: string = "",
    maxDerivativeOrderSideCount: u32 = 0,
    injRewardStakedRequirementThreshold: string = "",
    tradingRewardsVestingDuration: i64 = 0,
    liquidatorRewardShareRate: string = "",
    binaryOptionsMarketInstantListingFee: Coin | null = null,
    atomicMarketOrderAccessLevel: AtomicMarketOrderAccessLevel = 0,
    spotAtomicMarketOrderFeeMultiplier: string = "",
    derivativeAtomicMarketOrderFeeMultiplier: string = "",
    binaryOptionsAtomicMarketOrderFeeMultiplier: string = "",
    minimalProtocolFeeRate: string = "",
    isInstantDerivativeMarketLaunchEnabled: bool = false,
    postOnlyModeHeightThreshold: i64 = 0
  ) {
    this.spotMarketInstantListingFee = spotMarketInstantListingFee;
    this.derivativeMarketInstantListingFee = derivativeMarketInstantListingFee;
    this.defaultSpotMakerFeeRate = defaultSpotMakerFeeRate;
    this.defaultSpotTakerFeeRate = defaultSpotTakerFeeRate;
    this.defaultDerivativeMakerFeeRate = defaultDerivativeMakerFeeRate;
    this.defaultDerivativeTakerFeeRate = defaultDerivativeTakerFeeRate;
    this.defaultInitialMarginRatio = defaultInitialMarginRatio;
    this.defaultMaintenanceMarginRatio = defaultMaintenanceMarginRatio;
    this.defaultFundingInterval = defaultFundingInterval;
    this.fundingMultiple = fundingMultiple;
    this.relayerFeeShareRate = relayerFeeShareRate;
    this.defaultHourlyFundingRateCap = defaultHourlyFundingRateCap;
    this.defaultHourlyInterestRate = defaultHourlyInterestRate;
    this.maxDerivativeOrderSideCount = maxDerivativeOrderSideCount;
    this.injRewardStakedRequirementThreshold =
      injRewardStakedRequirementThreshold;
    this.tradingRewardsVestingDuration = tradingRewardsVestingDuration;
    this.liquidatorRewardShareRate = liquidatorRewardShareRate;
    this.binaryOptionsMarketInstantListingFee =
      binaryOptionsMarketInstantListingFee;
    this.atomicMarketOrderAccessLevel = atomicMarketOrderAccessLevel;
    this.spotAtomicMarketOrderFeeMultiplier =
      spotAtomicMarketOrderFeeMultiplier;
    this.derivativeAtomicMarketOrderFeeMultiplier =
      derivativeAtomicMarketOrderFeeMultiplier;
    this.binaryOptionsAtomicMarketOrderFeeMultiplier =
      binaryOptionsAtomicMarketOrderFeeMultiplier;
    this.minimalProtocolFeeRate = minimalProtocolFeeRate;
    this.isInstantDerivativeMarketLaunchEnabled =
      isInstantDerivativeMarketLaunchEnabled;
    this.postOnlyModeHeightThreshold = postOnlyModeHeightThreshold;
  }
}
