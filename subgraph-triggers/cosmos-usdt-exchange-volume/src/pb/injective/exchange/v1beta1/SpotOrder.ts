// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { OrderInfo } from "./OrderInfo";
import { OrderType } from "./OrderType";

export class SpotOrder {
  static encode(message: SpotOrder, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.marketId);

    const orderInfo = message.orderInfo;
    if (orderInfo !== null) {
      writer.uint32(18);
      writer.fork();
      OrderInfo.encode(orderInfo, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int32(message.orderType);

    writer.uint32(34);
    writer.string(message.triggerPrice);
  }

  static decode(reader: Reader, length: i32): SpotOrder {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SpotOrder();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketId = reader.string();
          break;

        case 2:
          message.orderInfo = OrderInfo.decode(reader, reader.uint32());
          break;

        case 3:
          message.orderType = reader.int32();
          break;

        case 4:
          message.triggerPrice = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  marketId: string;
  orderInfo: OrderInfo | null;
  orderType: OrderType;
  triggerPrice: string;

  constructor(
    marketId: string = "",
    orderInfo: OrderInfo | null = null,
    orderType: OrderType = 0,
    triggerPrice: string = ""
  ) {
    this.marketId = marketId;
    this.orderInfo = orderInfo;
    this.orderType = orderType;
    this.triggerPrice = triggerPrice;
  }
}
