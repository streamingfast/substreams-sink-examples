// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { OrderData } from "./OrderData";
import { SpotOrder } from "./SpotOrder";
import { DerivativeOrder } from "./DerivativeOrder";

export class MsgBatchUpdateOrders {
  static encode(message: MsgBatchUpdateOrders, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.subaccountId);

    const spotMarketIdsToCancelAll = message.spotMarketIdsToCancelAll;
    if (spotMarketIdsToCancelAll.length !== 0) {
      for (let i: i32 = 0; i < spotMarketIdsToCancelAll.length; ++i) {
        writer.uint32(26);
        writer.string(spotMarketIdsToCancelAll[i]);
      }
    }

    const derivativeMarketIdsToCancelAll =
      message.derivativeMarketIdsToCancelAll;
    if (derivativeMarketIdsToCancelAll.length !== 0) {
      for (let i: i32 = 0; i < derivativeMarketIdsToCancelAll.length; ++i) {
        writer.uint32(34);
        writer.string(derivativeMarketIdsToCancelAll[i]);
      }
    }

    const spotOrdersToCancel = message.spotOrdersToCancel;
    for (let i: i32 = 0; i < spotOrdersToCancel.length; ++i) {
      writer.uint32(42);
      writer.fork();
      OrderData.encode(spotOrdersToCancel[i], writer);
      writer.ldelim();
    }

    const derivativeOrdersToCancel = message.derivativeOrdersToCancel;
    for (let i: i32 = 0; i < derivativeOrdersToCancel.length; ++i) {
      writer.uint32(50);
      writer.fork();
      OrderData.encode(derivativeOrdersToCancel[i], writer);
      writer.ldelim();
    }

    const spotOrdersToCreate = message.spotOrdersToCreate;
    for (let i: i32 = 0; i < spotOrdersToCreate.length; ++i) {
      writer.uint32(58);
      writer.fork();
      SpotOrder.encode(spotOrdersToCreate[i], writer);
      writer.ldelim();
    }

    const derivativeOrdersToCreate = message.derivativeOrdersToCreate;
    for (let i: i32 = 0; i < derivativeOrdersToCreate.length; ++i) {
      writer.uint32(66);
      writer.fork();
      DerivativeOrder.encode(derivativeOrdersToCreate[i], writer);
      writer.ldelim();
    }

    const binaryOptionsOrdersToCancel = message.binaryOptionsOrdersToCancel;
    for (let i: i32 = 0; i < binaryOptionsOrdersToCancel.length; ++i) {
      writer.uint32(74);
      writer.fork();
      OrderData.encode(binaryOptionsOrdersToCancel[i], writer);
      writer.ldelim();
    }

    const binaryOptionsMarketIdsToCancelAll =
      message.binaryOptionsMarketIdsToCancelAll;
    if (binaryOptionsMarketIdsToCancelAll.length !== 0) {
      for (let i: i32 = 0; i < binaryOptionsMarketIdsToCancelAll.length; ++i) {
        writer.uint32(82);
        writer.string(binaryOptionsMarketIdsToCancelAll[i]);
      }
    }

    const binaryOptionsOrdersToCreate = message.binaryOptionsOrdersToCreate;
    for (let i: i32 = 0; i < binaryOptionsOrdersToCreate.length; ++i) {
      writer.uint32(90);
      writer.fork();
      DerivativeOrder.encode(binaryOptionsOrdersToCreate[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgBatchUpdateOrders {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBatchUpdateOrders();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.subaccountId = reader.string();
          break;

        case 3:
          message.spotMarketIdsToCancelAll.push(reader.string());
          break;

        case 4:
          message.derivativeMarketIdsToCancelAll.push(reader.string());
          break;

        case 5:
          message.spotOrdersToCancel.push(
            OrderData.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.derivativeOrdersToCancel.push(
            OrderData.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.spotOrdersToCreate.push(
            SpotOrder.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.derivativeOrdersToCreate.push(
            DerivativeOrder.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.binaryOptionsOrdersToCancel.push(
            OrderData.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.binaryOptionsMarketIdsToCancelAll.push(reader.string());
          break;

        case 11:
          message.binaryOptionsOrdersToCreate.push(
            DerivativeOrder.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  subaccountId: string;
  spotMarketIdsToCancelAll: Array<string>;
  derivativeMarketIdsToCancelAll: Array<string>;
  spotOrdersToCancel: Array<OrderData>;
  derivativeOrdersToCancel: Array<OrderData>;
  spotOrdersToCreate: Array<SpotOrder>;
  derivativeOrdersToCreate: Array<DerivativeOrder>;
  binaryOptionsOrdersToCancel: Array<OrderData>;
  binaryOptionsMarketIdsToCancelAll: Array<string>;
  binaryOptionsOrdersToCreate: Array<DerivativeOrder>;

  constructor(
    sender: string = "",
    subaccountId: string = "",
    spotMarketIdsToCancelAll: Array<string> = [],
    derivativeMarketIdsToCancelAll: Array<string> = [],
    spotOrdersToCancel: Array<OrderData> = [],
    derivativeOrdersToCancel: Array<OrderData> = [],
    spotOrdersToCreate: Array<SpotOrder> = [],
    derivativeOrdersToCreate: Array<DerivativeOrder> = [],
    binaryOptionsOrdersToCancel: Array<OrderData> = [],
    binaryOptionsMarketIdsToCancelAll: Array<string> = [],
    binaryOptionsOrdersToCreate: Array<DerivativeOrder> = []
  ) {
    this.sender = sender;
    this.subaccountId = subaccountId;
    this.spotMarketIdsToCancelAll = spotMarketIdsToCancelAll;
    this.derivativeMarketIdsToCancelAll = derivativeMarketIdsToCancelAll;
    this.spotOrdersToCancel = spotOrdersToCancel;
    this.derivativeOrdersToCancel = derivativeOrdersToCancel;
    this.spotOrdersToCreate = spotOrdersToCreate;
    this.derivativeOrdersToCreate = derivativeOrdersToCreate;
    this.binaryOptionsOrdersToCancel = binaryOptionsOrdersToCancel;
    this.binaryOptionsMarketIdsToCancelAll = binaryOptionsMarketIdsToCancelAll;
    this.binaryOptionsOrdersToCreate = binaryOptionsOrdersToCreate;
  }
}
