// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { DerivativeOrder } from "./DerivativeOrder";

export class MsgBatchCreateDerivativeLimitOrders {
  static encode(
    message: MsgBatchCreateDerivativeLimitOrders,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.sender);

    const orders = message.orders;
    for (let i: i32 = 0; i < orders.length; ++i) {
      writer.uint32(18);
      writer.fork();
      DerivativeOrder.encode(orders[i], writer);
      writer.ldelim();
    }
  }

  static decode(
    reader: Reader,
    length: i32
  ): MsgBatchCreateDerivativeLimitOrders {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgBatchCreateDerivativeLimitOrders();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.orders.push(DerivativeOrder.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  orders: Array<DerivativeOrder>;

  constructor(sender: string = "", orders: Array<DerivativeOrder> = []) {
    this.sender = sender;
    this.orders = orders;
  }
}
