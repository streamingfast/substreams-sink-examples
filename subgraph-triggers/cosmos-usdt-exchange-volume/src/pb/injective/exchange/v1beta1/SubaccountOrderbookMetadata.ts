// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class SubaccountOrderbookMetadata {
  static encode(message: SubaccountOrderbookMetadata, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.vanillaLimitOrderCount);

    writer.uint32(16);
    writer.uint32(message.reduceOnlyLimitOrderCount);

    writer.uint32(26);
    writer.string(message.aggregateReduceOnlyQuantity);

    writer.uint32(34);
    writer.string(message.aggregateVanillaQuantity);

    writer.uint32(40);
    writer.uint32(message.vanillaConditionalOrderCount);

    writer.uint32(48);
    writer.uint32(message.reduceOnlyConditionalOrderCount);
  }

  static decode(reader: Reader, length: i32): SubaccountOrderbookMetadata {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SubaccountOrderbookMetadata();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.vanillaLimitOrderCount = reader.uint32();
          break;

        case 2:
          message.reduceOnlyLimitOrderCount = reader.uint32();
          break;

        case 3:
          message.aggregateReduceOnlyQuantity = reader.string();
          break;

        case 4:
          message.aggregateVanillaQuantity = reader.string();
          break;

        case 5:
          message.vanillaConditionalOrderCount = reader.uint32();
          break;

        case 6:
          message.reduceOnlyConditionalOrderCount = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  vanillaLimitOrderCount: u32;
  reduceOnlyLimitOrderCount: u32;
  aggregateReduceOnlyQuantity: string;
  aggregateVanillaQuantity: string;
  vanillaConditionalOrderCount: u32;
  reduceOnlyConditionalOrderCount: u32;

  constructor(
    vanillaLimitOrderCount: u32 = 0,
    reduceOnlyLimitOrderCount: u32 = 0,
    aggregateReduceOnlyQuantity: string = "",
    aggregateVanillaQuantity: string = "",
    vanillaConditionalOrderCount: u32 = 0,
    reduceOnlyConditionalOrderCount: u32 = 0
  ) {
    this.vanillaLimitOrderCount = vanillaLimitOrderCount;
    this.reduceOnlyLimitOrderCount = reduceOnlyLimitOrderCount;
    this.aggregateReduceOnlyQuantity = aggregateReduceOnlyQuantity;
    this.aggregateVanillaQuantity = aggregateVanillaQuantity;
    this.vanillaConditionalOrderCount = vanillaConditionalOrderCount;
    this.reduceOnlyConditionalOrderCount = reduceOnlyConditionalOrderCount;
  }
}
