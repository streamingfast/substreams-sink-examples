// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { TradingRewardCampaignBoostInfo } from "./TradingRewardCampaignBoostInfo";

export class TradingRewardCampaignInfo {
  static encode(message: TradingRewardCampaignInfo, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.campaignDurationSeconds);

    const quoteDenoms = message.quoteDenoms;
    if (quoteDenoms.length !== 0) {
      for (let i: i32 = 0; i < quoteDenoms.length; ++i) {
        writer.uint32(18);
        writer.string(quoteDenoms[i]);
      }
    }

    const tradingRewardBoostInfo = message.tradingRewardBoostInfo;
    if (tradingRewardBoostInfo !== null) {
      writer.uint32(26);
      writer.fork();
      TradingRewardCampaignBoostInfo.encode(tradingRewardBoostInfo, writer);
      writer.ldelim();
    }

    const disqualifiedMarketIds = message.disqualifiedMarketIds;
    if (disqualifiedMarketIds.length !== 0) {
      for (let i: i32 = 0; i < disqualifiedMarketIds.length; ++i) {
        writer.uint32(34);
        writer.string(disqualifiedMarketIds[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): TradingRewardCampaignInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TradingRewardCampaignInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.campaignDurationSeconds = reader.int64();
          break;

        case 2:
          message.quoteDenoms.push(reader.string());
          break;

        case 3:
          message.tradingRewardBoostInfo =
            TradingRewardCampaignBoostInfo.decode(reader, reader.uint32());
          break;

        case 4:
          message.disqualifiedMarketIds.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  campaignDurationSeconds: i64;
  quoteDenoms: Array<string>;
  tradingRewardBoostInfo: TradingRewardCampaignBoostInfo | null;
  disqualifiedMarketIds: Array<string>;

  constructor(
    campaignDurationSeconds: i64 = 0,
    quoteDenoms: Array<string> = [],
    tradingRewardBoostInfo: TradingRewardCampaignBoostInfo | null = null,
    disqualifiedMarketIds: Array<string> = []
  ) {
    this.campaignDurationSeconds = campaignDurationSeconds;
    this.quoteDenoms = quoteDenoms;
    this.tradingRewardBoostInfo = tradingRewardBoostInfo;
    this.disqualifiedMarketIds = disqualifiedMarketIds;
  }
}
