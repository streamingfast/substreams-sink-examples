// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class ExpiryFuturesMarketInfo {
  static encode(message: ExpiryFuturesMarketInfo, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.marketId);

    writer.uint32(16);
    writer.int64(message.expirationTimestamp);

    writer.uint32(24);
    writer.int64(message.twapStartTimestamp);

    writer.uint32(34);
    writer.string(message.expirationTwapStartPriceCumulative);

    writer.uint32(42);
    writer.string(message.settlementPrice);
  }

  static decode(reader: Reader, length: i32): ExpiryFuturesMarketInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ExpiryFuturesMarketInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.marketId = reader.string();
          break;

        case 2:
          message.expirationTimestamp = reader.int64();
          break;

        case 3:
          message.twapStartTimestamp = reader.int64();
          break;

        case 4:
          message.expirationTwapStartPriceCumulative = reader.string();
          break;

        case 5:
          message.settlementPrice = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  marketId: string;
  expirationTimestamp: i64;
  twapStartTimestamp: i64;
  expirationTwapStartPriceCumulative: string;
  settlementPrice: string;

  constructor(
    marketId: string = "",
    expirationTimestamp: i64 = 0,
    twapStartTimestamp: i64 = 0,
    expirationTwapStartPriceCumulative: string = "",
    settlementPrice: string = ""
  ) {
    this.marketId = marketId;
    this.expirationTimestamp = expirationTimestamp;
    this.twapStartTimestamp = twapStartTimestamp;
    this.expirationTwapStartPriceCumulative =
      expirationTwapStartPriceCumulative;
    this.settlementPrice = settlementPrice;
  }
}
