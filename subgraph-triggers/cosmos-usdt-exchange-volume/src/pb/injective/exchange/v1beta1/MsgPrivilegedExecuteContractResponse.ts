// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class MsgPrivilegedExecuteContractResponse {
  static encode(
    message: MsgPrivilegedExecuteContractResponse,
    writer: Writer
  ): void {
    const fundsDiff = message.fundsDiff;
    for (let i: i32 = 0; i < fundsDiff.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Coin.encode(fundsDiff[i], writer);
      writer.ldelim();
    }
  }

  static decode(
    reader: Reader,
    length: i32
  ): MsgPrivilegedExecuteContractResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgPrivilegedExecuteContractResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fundsDiff.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  fundsDiff: Array<Coin>;

  constructor(fundsDiff: Array<Coin> = []) {
    this.fundsDiff = fundsDiff;
  }
}
