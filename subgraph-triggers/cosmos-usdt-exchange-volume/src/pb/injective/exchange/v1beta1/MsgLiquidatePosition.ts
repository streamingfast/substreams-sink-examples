// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { DerivativeOrder } from "./DerivativeOrder";

export class MsgLiquidatePosition {
  static encode(message: MsgLiquidatePosition, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(18);
    writer.string(message.subaccountId);

    writer.uint32(26);
    writer.string(message.marketId);

    const order = message.order;
    if (order !== null) {
      writer.uint32(34);
      writer.fork();
      DerivativeOrder.encode(order, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgLiquidatePosition {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLiquidatePosition();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.subaccountId = reader.string();
          break;

        case 3:
          message.marketId = reader.string();
          break;

        case 4:
          message.order = DerivativeOrder.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  subaccountId: string;
  marketId: string;
  order: DerivativeOrder | null;

  constructor(
    sender: string = "",
    subaccountId: string = "",
    marketId: string = "",
    order: DerivativeOrder | null = null
  ) {
    this.sender = sender;
    this.subaccountId = subaccountId;
    this.marketId = marketId;
    this.order = order;
  }
}
